{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/Users/steveruiz/GitHub/play-rn-prototype/src/components/panel/core.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { useLocalState } from \"@state-designer/react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { Bar } from \"./bar\";\nvar stack = 0;\nvar FULL_HEIGHT = Dimensions.get(\"window\").height;\nvar FULL_WIDTH = Dimensions.get(\"window\").width;\nvar PANEL_HEIGHT = FULL_HEIGHT - 52;\nvar PANEL_ANIM_OPTIONS = {\n  tension: 160,\n  friction: 25,\n  useNativeDriver: true,\n  restDisplacementThreshold: 10,\n  restSpeedThreshold: 10\n};\nvar BG_ANIM_OPTIONS = {\n  duration: 180,\n  useNativeDriver: true\n};\n\nfunction SwipeablePanel(_ref) {\n  var style = _ref.style,\n      barStyle = _ref.barStyle,\n      onClose = _ref.onClose,\n      onCloseAttempt = _ref.onCloseAttempt,\n      _ref$isActive = _ref.isActive,\n      isActive = _ref$isActive === void 0 ? false : _ref$isActive,\n      _ref$openLarge = _ref.openLarge,\n      openLarge = _ref$openLarge === void 0 ? true : _ref$openLarge,\n      _ref$onlySmall = _ref.onlySmall,\n      onlySmall = _ref$onlySmall === void 0 ? false : _ref$onlySmall,\n      _ref$onlyLarge = _ref.onlyLarge,\n      onlyLarge = _ref$onlyLarge === void 0 ? false : _ref$onlyLarge,\n      _ref$fullWidth = _ref.fullWidth,\n      fullWidth = _ref$fullWidth === void 0 ? true : _ref$fullWidth,\n      _ref$noBar = _ref.noBar,\n      noBar = _ref$noBar === void 0 ? false : _ref$noBar,\n      _ref$stayOpen = _ref.stayOpen,\n      stayOpen = _ref$stayOpen === void 0 ? false : _ref$stayOpen,\n      _ref$showScrim = _ref.showScrim,\n      showScrim = _ref$showScrim === void 0 ? false : _ref$showScrim,\n      children = _ref.children;\n  var state = useLocalState({\n    data: {\n      zIndex: stack,\n      deviceWidth: FULL_WIDTH,\n      deviceHeight: FULL_HEIGHT,\n      panelHeight: FULL_HEIGHT - 52,\n      panY: FULL_HEIGHT / 2,\n      pan: new Animated.ValueXY({\n        x: 0,\n        y: FULL_HEIGHT / 2\n      }),\n      animatedOpacity: new Animated.Value(0),\n      orientation: FULL_HEIGHT >= FULL_WIDTH ? \"portrait\" : \"landscape\"\n    },\n    on: {\n      MOVED_PANEL_Y: {\n        secretlyDo: \"setPanY\"\n      },\n      GRANTED_PAN: {\n        secretlyDo: \"setInitialPan\"\n      },\n      CHANGED_ORIENTATION: \"setDeviceSizes\"\n    },\n    initial: isActive ? \"open\" : \"closed\",\n    states: {\n      open: {\n        onEnter: \"showBackground\",\n        on: {\n          RELEASED_STABLE: {\n            secretlyDo: \"flattenPanOffset\"\n          },\n          RELEASED_SWIPING_UP: {\n            secretlyDo: \"flattenPanOffset\"\n          },\n          RELEASED_SWIPING_DOWN: {\n            secretlyDo: \"flattenPanOffset\"\n          },\n          CLOSED: {\n            to: \"animatingToClosed\"\n          }\n        },\n        initial: \"animating\",\n        states: {\n          stable: {\n            initial: \"large\",\n            states: {\n              large: {\n                on: {\n                  MOVED_PAN: {\n                    secretlyDo: \"updatePanLarge\"\n                  },\n                  RELEASED_STABLE: {\n                    to: \"animatingToLarge\"\n                  },\n                  RELEASED_SWIPING_UP: {\n                    unless: \"isOnlySmall\",\n                    to: \"animatingToLarge\"\n                  },\n                  RELEASED_SWIPING_DOWN: {\n                    if: \"canClose\",\n                    to: \"animatingToClosed\",\n                    else: [\"handleCloseAttempt\", {\n                      if: \"isOnlyLarge\",\n                      to: \"animatingToLarge\",\n                      else: {\n                        to: \"animatingToSmall\"\n                      }\n                    }]\n                  }\n                }\n              },\n              small: {\n                on: {\n                  MOVED_PAN: {\n                    secretlyDo: \"updatePanSmall\"\n                  },\n                  RELEASED_STABLE: {\n                    to: \"animatingToSmall\"\n                  },\n                  RELEASED_SWIPING_UP: {\n                    if: \"isOnlySmall\",\n                    to: \"animatingToSmall\",\n                    else: {\n                      to: \"animatingToLarge\"\n                    }\n                  },\n                  RELEASED_SWIPING_DOWN: [{\n                    if: \"canClose\",\n                    to: \"animatingToClosed\",\n                    else: {\n                      do: \"handleCloseAttempt\",\n                      to: \"animatingToSmall\"\n                    }\n                  }]\n                }\n              }\n            }\n          },\n          animating: {\n            onEnter: [\"stopAnimations\", \"showBackground\"],\n            initial: openLarge ? \"animatingToLarge\" : \"animatingToSmall\",\n            states: {\n              animatingToLarge: {\n                async: {\n                  await: \"animateToLarge\",\n                  onResolve: {\n                    to: \"large\"\n                  }\n                }\n              },\n              animatingToSmall: {\n                async: {\n                  await: \"animateToSmall\",\n                  onResolve: {\n                    to: \"small\"\n                  }\n                }\n              }\n            }\n          },\n          animatingToClosed: {\n            onEnter: [\"hideBackground\"],\n            async: {\n              await: \"animateToClosed\",\n              onResolve: {\n                do: \"notifyOnClose\",\n                to: \"closed\"\n              }\n            }\n          }\n        }\n      },\n      closed: {\n        on: {\n          OPENED: {\n            to: \"open\"\n          }\n        }\n      }\n    },\n    conditions: {\n      isOnlySmall: function isOnlySmall() {\n        return onlySmall;\n      },\n      isOnlyLarge: function isOnlyLarge() {\n        return onlyLarge;\n      },\n      canClose: function canClose() {\n        return !stayOpen;\n      }\n    },\n    actions: {\n      stopAnimations: function stopAnimations(data) {\n        var animatedOpacity = data.animatedOpacity,\n            pan = data.pan;\n        animatedOpacity.stopAnimation();\n        pan.stopAnimation();\n      },\n      showBackground: function showBackground(data) {\n        var animatedOpacity = data.animatedOpacity;\n        Animated.timing(animatedOpacity, _objectSpread({\n          toValue: 1\n        }, BG_ANIM_OPTIONS)).start();\n      },\n      hideBackground: function hideBackground(data) {\n        var animatedOpacity = data.animatedOpacity;\n        Animated.timing(animatedOpacity, _objectSpread({\n          toValue: 0\n        }, BG_ANIM_OPTIONS)).start();\n      },\n      setPanY: function setPanY(data, _ref2) {\n        var y = _ref2.y;\n        data.panY = y;\n      },\n      setInitialPan: function setInitialPan(data) {\n        var pan = data.pan,\n            panY = data.panY;\n        pan.setOffset({\n          x: 0,\n          y: panY\n        });\n        pan.setValue({\n          x: 0,\n          y: 0\n        });\n      },\n      updatePanSmall: function updatePanSmall(data, _ref3) {\n        var dy = _ref3.dy;\n        var pan = data.pan;\n        var _pan$y = pan.y,\n            _value = _pan$y._value,\n            _offset = _pan$y._offset;\n\n        if (Math.abs(_value) <= _offset) {\n          pan.setValue({\n            x: 0,\n            y: dy\n          });\n        }\n      },\n      updatePanLarge: function updatePanLarge(data, _ref4) {\n        var dy = _ref4.dy;\n        var pan = data.pan;\n        var _value = pan.y._value;\n\n        if (_value > -1) {\n          pan.setValue({\n            x: 0,\n            y: Math.max(0, dy)\n          });\n        }\n      },\n      flattenPanOffset: function flattenPanOffset(data) {\n        var pan = data.pan;\n        pan.flattenOffset();\n      },\n      setDeviceSizes: function setDeviceSizes(data, payload) {\n        data.deviceHeight = payload.height;\n        data.deviceWidth = payload.width;\n        data.panelHeight = payload.height - 52;\n      },\n      notifyOnClose: function notifyOnClose() {\n        onClose && onClose();\n      },\n      handleCloseAttempt: function handleCloseAttempt() {\n        onCloseAttempt && onCloseAttempt();\n      }\n    },\n    asyncs: {\n      animateToLarge: function animateToLarge(data) {\n        var pan;\n        return _regeneratorRuntime.async(function animateToLarge$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                pan = data.pan;\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  Animated.spring(pan, _objectSpread(_objectSpread({}, PANEL_ANIM_OPTIONS), {}, {\n                    toValue: {\n                      x: 0,\n                      y: 0\n                    }\n                  })).start(resolve);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      animateToSmall: function animateToSmall(data) {\n        var pan, orientation, deviceHeight, y;\n        return _regeneratorRuntime.async(function animateToSmall$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                pan = data.pan, orientation = data.orientation, deviceHeight = data.deviceHeight;\n                y = orientation === \"portrait\" ? deviceHeight / 2 : deviceHeight / 3;\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  Animated.spring(pan, _objectSpread({\n                    toValue: {\n                      x: 0,\n                      y: y\n                    }\n                  }, PANEL_ANIM_OPTIONS)).start(resolve);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      animateToClosed: function animateToClosed(data) {\n        var pan, panelHeight;\n        return _regeneratorRuntime.async(function animateToClosed$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                pan = data.pan, panelHeight = data.panelHeight;\n                return _context3.abrupt(\"return\", new Promise(function (resolve) {\n                  Animated.spring(pan, _objectSpread({\n                    toValue: {\n                      x: 0,\n                      y: panelHeight\n                    }\n                  }, PANEL_ANIM_OPTIONS)).start(resolve);\n                }));\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }\n  });\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n        return true;\n      },\n      onPanResponderGrant: function onPanResponderGrant() {\n        return state.send(\"GRANTED_PAN\");\n      },\n      onPanResponderMove: function onPanResponderMove(_, _ref5) {\n        var dy = _ref5.dy;\n        return state.send(\"MOVED_PAN\", {\n          dy: dy\n        });\n      },\n      onPanResponderRelease: function onPanResponderRelease(_, _ref6) {\n        var dy = _ref6.dy,\n            vy = _ref6.vy;\n\n        if (dy < -100 || vy < -0.5) {\n          state.send(\"RELEASED_SWIPING_UP\");\n        } else if (dy > 100 || vy > 0.5) {\n          state.send(\"RELEASED_SWIPING_DOWN\");\n        } else {\n          state.send(\"RELEASED_STABLE\");\n        }\n      }\n    });\n  }, [state]);\n  React.useEffect(function () {\n    function handleYChange(value) {\n      state.send(\"MOVED_PANEL_Y\", {\n        y: value.value\n      });\n    }\n\n    function onOrientationChange() {\n      var _Dimensions$get = Dimensions.get(\"screen\"),\n          height = _Dimensions$get.height,\n          width = _Dimensions$get.width;\n\n      state.send(\"CHANGED_ORIENTATION\", {\n        height: height,\n        width: width\n      });\n    }\n\n    var id = state.data.pan.y.addListener(handleYChange);\n    Dimensions.addEventListener(\"change\", onOrientationChange);\n    return function () {\n      state.data.pan.y.removeListener(id);\n      Dimensions.removeEventListener(\"change\", onOrientationChange);\n    };\n  }, [state]);\n  React.useEffect(function () {\n    state.send(isActive ? \"OPENED\" : \"CLOSED\");\n  }, [isActive]);\n  React.useEffect(function () {\n    stack++;\n    return function () {\n      return stack--;\n    };\n  }, []);\n  var _state$data = state.data,\n      deviceWidth = _state$data.deviceWidth,\n      deviceHeight = _state$data.deviceHeight,\n      animatedOpacity = _state$data.animatedOpacity,\n      panelHeight = _state$data.panelHeight,\n      pan = _state$data.pan;\n  return state.isIn(\"closed\") ? null : React.createElement(Animated.View, {\n    style: [SwipeablePanelStyles.background, {\n      zIndex: state.data.zIndex\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }\n  }, React.createElement(Animated.View, {\n    style: [SwipeablePanelStyles.background, {\n      width: deviceWidth,\n      backgroundColor: \"rgba(0,0,0,.5)\",\n      height: deviceHeight,\n      opacity: animatedOpacity\n    }],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }\n  }), React.createElement(Animated.View, _extends({\n    style: [SwipeablePanelStyles.panel, {\n      width: fullWidth ? deviceWidth : deviceWidth - 50,\n      height: panelHeight\n    }, {\n      transform: pan.getTranslateTransform()\n    }, style]\n  }, panResponder.panHandlers, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }\n  }), !noBar && React.createElement(Bar, {\n    barStyle: barStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 20\n    }\n  }), React.createElement(View, {\n    style: SwipeablePanelStyles.scrollViewContentContainerStyle,\n    pointerEvents: state.isIn(\"stable\") ? \"auto\" : \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }\n  }, children)));\n}\n\nvar SwipeablePanelStyles = StyleSheet.create({\n  background: {\n    position: \"absolute\",\n    zIndex: 1,\n    bottom: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  panel: {\n    height: PANEL_HEIGHT,\n    width: FULL_WIDTH - 50,\n    transform: [{\n      translateY: 0\n    }],\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"white\",\n    zIndex: 2,\n    bottom: 0,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    overflow: \"hidden\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.18,\n    shadowRadius: 1.0,\n    elevation: 1\n  },\n  scrollViewContentContainerStyle: {\n    width: \"100%\",\n    flex: 1\n  }\n});\nvar SMALL_PANEL_CONTENT_HEIGHT = PANEL_HEIGHT - (FULL_HEIGHT - 400) - 52;\nvar LARGE_PANEL_CONTENT_HEIGHT = PANEL_HEIGHT - 52;\nexport { SwipeablePanel, LARGE_PANEL_CONTENT_HEIGHT, SMALL_PANEL_CONTENT_HEIGHT };","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/components/panel/core.tsx"],"names":["React","useLocalState","Bar","stack","FULL_HEIGHT","Dimensions","get","height","FULL_WIDTH","width","PANEL_HEIGHT","PANEL_ANIM_OPTIONS","tension","friction","useNativeDriver","restDisplacementThreshold","restSpeedThreshold","BG_ANIM_OPTIONS","duration","SwipeablePanel","style","barStyle","onClose","onCloseAttempt","isActive","openLarge","onlySmall","onlyLarge","fullWidth","noBar","stayOpen","showScrim","children","state","data","zIndex","deviceWidth","deviceHeight","panelHeight","panY","pan","Animated","ValueXY","x","y","animatedOpacity","Value","orientation","on","MOVED_PANEL_Y","secretlyDo","GRANTED_PAN","CHANGED_ORIENTATION","initial","states","open","onEnter","RELEASED_STABLE","RELEASED_SWIPING_UP","RELEASED_SWIPING_DOWN","CLOSED","to","stable","large","MOVED_PAN","unless","if","else","small","do","animating","animatingToLarge","async","await","onResolve","animatingToSmall","animatingToClosed","closed","OPENED","conditions","isOnlySmall","isOnlyLarge","canClose","actions","stopAnimations","stopAnimation","showBackground","timing","toValue","start","hideBackground","setPanY","setInitialPan","setOffset","setValue","updatePanSmall","dy","_value","_offset","Math","abs","updatePanLarge","max","flattenPanOffset","flattenOffset","setDeviceSizes","payload","notifyOnClose","handleCloseAttempt","asyncs","animateToLarge","Promise","resolve","spring","animateToSmall","animateToClosed","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","onPanResponderGrant","send","onPanResponderMove","_","onPanResponderRelease","vy","useEffect","handleYChange","value","onOrientationChange","id","addListener","addEventListener","removeListener","removeEventListener","isIn","SwipeablePanelStyles","background","backgroundColor","opacity","panel","transform","getTranslateTransform","panHandlers","scrollViewContentContainerStyle","StyleSheet","position","bottom","justifyContent","alignItems","translateY","display","flexDirection","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","overflow","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","flex","SMALL_PANEL_CONTENT_HEIGHT","LARGE_PANEL_CONTENT_HEIGHT"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,uBAA9B;;;;;;AASA,SAASC,GAAT;AAEA,IAAIC,KAAK,GAAG,CAAZ;AAEA,IAAMC,WAAW,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAA7C;AACA,IAAMC,UAAU,GAAGH,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBG,KAA5C;AACA,IAAMC,YAAY,GAAGN,WAAW,GAAG,EAAnC;AACA,IAAMO,kBAAkB,GAAG;AACzBC,EAAAA,OAAO,EAAE,GADgB;AAEzBC,EAAAA,QAAQ,EAAE,EAFe;AAGzBC,EAAAA,eAAe,EAAE,IAHQ;AAIzBC,EAAAA,yBAAyB,EAAE,EAJF;AAKzBC,EAAAA,kBAAkB,EAAE;AALK,CAA3B;AAOA,IAAMC,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE,GADY;AAEtBJ,EAAAA,eAAe,EAAE;AAFK,CAAxB;;AAyBA,SAASK,cAAT,OAcwB;AAAA,MAbtBC,KAasB,QAbtBA,KAasB;AAAA,MAZtBC,QAYsB,QAZtBA,QAYsB;AAAA,MAXtBC,OAWsB,QAXtBA,OAWsB;AAAA,MAVtBC,cAUsB,QAVtBA,cAUsB;AAAA,2BATtBC,QASsB;AAAA,MATtBA,QASsB,8BATX,KASW;AAAA,4BARtBC,SAQsB;AAAA,MARtBA,SAQsB,+BARV,IAQU;AAAA,4BAPtBC,SAOsB;AAAA,MAPtBA,SAOsB,+BAPV,KAOU;AAAA,4BANtBC,SAMsB;AAAA,MANtBA,SAMsB,+BANV,KAMU;AAAA,4BALtBC,SAKsB;AAAA,MALtBA,SAKsB,+BALV,IAKU;AAAA,wBAJtBC,KAIsB;AAAA,MAJtBA,KAIsB,2BAJd,KAIc;AAAA,2BAHtBC,QAGsB;AAAA,MAHtBA,QAGsB,8BAHX,KAGW;AAAA,4BAFtBC,SAEsB;AAAA,MAFtBA,SAEsB,+BAFV,KAEU;AAAA,MADtBC,QACsB,QADtBA,QACsB;AACtB,MAAMC,KAAK,GAAGhC,aAAa,CAAC;AAC1BiC,IAAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEhC,KADJ;AAEJiC,MAAAA,WAAW,EAAE5B,UAFT;AAGJ6B,MAAAA,YAAY,EAAEjC,WAHV;AAIJkC,MAAAA,WAAW,EAAElC,WAAW,GAAG,EAJvB;AAKJmC,MAAAA,IAAI,EAAEnC,WAAW,GAAG,CALhB;AAMJoC,MAAAA,GAAG,EAAE,IAAIC,QAAQ,CAACC,OAAb,CAAqB;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAExC,WAAW,GAAG;AAAzB,OAArB,CAND;AAOJyC,MAAAA,eAAe,EAAE,IAAIJ,QAAQ,CAACK,KAAb,CAAmB,CAAnB,CAPb;AAQJC,MAAAA,WAAW,EAAE3C,WAAW,IAAII,UAAf,GAA4B,UAA5B,GAAyC;AARlD,KADoB;AAW1BwC,IAAAA,EAAE,EAAE;AACFC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,UAAU,EAAE;AAAd,OADb;AAEFC,MAAAA,WAAW,EAAE;AAAED,QAAAA,UAAU,EAAE;AAAd,OAFX;AAGFE,MAAAA,mBAAmB,EAAE;AAHnB,KAXsB;AAgB1BC,IAAAA,OAAO,EAAE7B,QAAQ,GAAG,MAAH,GAAY,QAhBH;AAiB1B8B,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE,gBADL;AAEJR,QAAAA,EAAE,EAAE;AACFS,UAAAA,eAAe,EAAE;AAAEP,YAAAA,UAAU,EAAE;AAAd,WADf;AAEFQ,UAAAA,mBAAmB,EAAE;AAAER,YAAAA,UAAU,EAAE;AAAd,WAFnB;AAGFS,UAAAA,qBAAqB,EAAE;AAAET,YAAAA,UAAU,EAAE;AAAd,WAHrB;AAIFU,UAAAA,MAAM,EAAE;AAAEC,YAAAA,EAAE,EAAE;AAAN;AAJN,SAFA;AAQJR,QAAAA,OAAO,EAAE,WARL;AASJC,QAAAA,MAAM,EAAE;AACNQ,UAAAA,MAAM,EAAE;AACNT,YAAAA,OAAO,EAAE,OADH;AAENC,YAAAA,MAAM,EAAE;AACNS,cAAAA,KAAK,EAAE;AACLf,gBAAAA,EAAE,EAAE;AACFgB,kBAAAA,SAAS,EAAE;AAAEd,oBAAAA,UAAU,EAAE;AAAd,mBADT;AAEFO,kBAAAA,eAAe,EAAE;AAAEI,oBAAAA,EAAE,EAAE;AAAN,mBAFf;AAGFH,kBAAAA,mBAAmB,EAAE;AACnBO,oBAAAA,MAAM,EAAE,aADW;AAEnBJ,oBAAAA,EAAE,EAAE;AAFe,mBAHnB;AAOFF,kBAAAA,qBAAqB,EAAE;AACrBO,oBAAAA,EAAE,EAAE,UADiB;AAErBL,oBAAAA,EAAE,EAAE,mBAFiB;AAGrBM,oBAAAA,IAAI,EAAE,CACJ,oBADI,EAEJ;AACED,sBAAAA,EAAE,EAAE,aADN;AAEEL,sBAAAA,EAAE,EAAE,kBAFN;AAGEM,sBAAAA,IAAI,EAAE;AAAEN,wBAAAA,EAAE,EAAE;AAAN;AAHR,qBAFI;AAHe;AAPrB;AADC,eADD;AAuBNO,cAAAA,KAAK,EAAE;AACLpB,gBAAAA,EAAE,EAAE;AACFgB,kBAAAA,SAAS,EAAE;AAAEd,oBAAAA,UAAU,EAAE;AAAd,mBADT;AAEFO,kBAAAA,eAAe,EAAE;AAAEI,oBAAAA,EAAE,EAAE;AAAN,mBAFf;AAGFH,kBAAAA,mBAAmB,EAAE;AACnBQ,oBAAAA,EAAE,EAAE,aADe;AAEnBL,oBAAAA,EAAE,EAAE,kBAFe;AAGnBM,oBAAAA,IAAI,EAAE;AAAEN,sBAAAA,EAAE,EAAE;AAAN;AAHa,mBAHnB;AAQFF,kBAAAA,qBAAqB,EAAE,CACrB;AACEO,oBAAAA,EAAE,EAAE,UADN;AAEEL,oBAAAA,EAAE,EAAE,mBAFN;AAGEM,oBAAAA,IAAI,EAAE;AACJE,sBAAAA,EAAE,EAAE,oBADA;AAEJR,sBAAAA,EAAE,EAAE;AAFA;AAHR,mBADqB;AARrB;AADC;AAvBD;AAFF,WADF;AAiDNS,UAAAA,SAAS,EAAE;AACTd,YAAAA,OAAO,EAAE,CAAC,gBAAD,EAAmB,gBAAnB,CADA;AAETH,YAAAA,OAAO,EAAE5B,SAAS,GAAG,kBAAH,GAAwB,kBAFjC;AAGT6B,YAAAA,MAAM,EAAE;AACNiB,cAAAA,gBAAgB,EAAE;AAChBC,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,KAAK,EAAE,gBADF;AAELC,kBAAAA,SAAS,EAAE;AAAEb,oBAAAA,EAAE,EAAE;AAAN;AAFN;AADS,eADZ;AAONc,cAAAA,gBAAgB,EAAE;AAChBH,gBAAAA,KAAK,EAAE;AACLC,kBAAAA,KAAK,EAAE,gBADF;AAELC,kBAAAA,SAAS,EAAE;AAAEb,oBAAAA,EAAE,EAAE;AAAN;AAFN;AADS;AAPZ;AAHC,WAjDL;AAmENe,UAAAA,iBAAiB,EAAE;AACjBpB,YAAAA,OAAO,EAAE,CAAC,gBAAD,CADQ;AAEjBgB,YAAAA,KAAK,EAAE;AACLC,cAAAA,KAAK,EAAE,iBADF;AAELC,cAAAA,SAAS,EAAE;AAAEL,gBAAAA,EAAE,EAAE,eAAN;AAAuBR,gBAAAA,EAAE,EAAE;AAA3B;AAFN;AAFU;AAnEb;AATJ,OADA;AAsFNgB,MAAAA,MAAM,EAAE;AACN7B,QAAAA,EAAE,EAAE;AACF8B,UAAAA,MAAM,EAAE;AAAEjB,YAAAA,EAAE,EAAE;AAAN;AADN;AADE;AAtFF,KAjBkB;AA6G1BkB,IAAAA,UAAU,EAAE;AACVC,MAAAA,WADU,yBACI;AACZ,eAAOtD,SAAP;AACD,OAHS;AAIVuD,MAAAA,WAJU,yBAII;AACZ,eAAOtD,SAAP;AACD,OANS;AAOVuD,MAAAA,QAPU,sBAOC;AACT,eAAO,CAACpD,QAAR;AACD;AATS,KA7Gc;AAwH1BqD,IAAAA,OAAO,EAAE;AAGPC,MAAAA,cAHO,0BAGQlD,IAHR,EAGc;AAAA,YACXW,eADW,GACcX,IADd,CACXW,eADW;AAAA,YACML,GADN,GACcN,IADd,CACMM,GADN;AAEnBK,QAAAA,eAAe,CAACwC,aAAhB;AACA7C,QAAAA,GAAG,CAAC6C,aAAJ;AACD,OAPM;AAQPC,MAAAA,cARO,0BAQQpD,IARR,EAQc;AAAA,YACXW,eADW,GACSX,IADT,CACXW,eADW;AAGnBJ,QAAAA,QAAQ,CAAC8C,MAAT,CAAgB1C,eAAhB;AACE2C,UAAAA,OAAO,EAAE;AADX,WAEKvE,eAFL,GAGGwE,KAHH;AAID,OAfM;AAgBPC,MAAAA,cAhBO,0BAgBQxD,IAhBR,EAgBc;AAAA,YACXW,eADW,GACSX,IADT,CACXW,eADW;AAGnBJ,QAAAA,QAAQ,CAAC8C,MAAT,CAAgB1C,eAAhB;AACE2C,UAAAA,OAAO,EAAE;AADX,WAEKvE,eAFL,GAGGwE,KAHH;AAID,OAvBM;AA2BPE,MAAAA,OA3BO,mBA2BCzD,IA3BD,SA2B6B;AAAA,YAApBU,CAAoB,SAApBA,CAAoB;AAClCV,QAAAA,IAAI,CAACK,IAAL,GAAYK,CAAZ;AACD,OA7BM;AA8BPgD,MAAAA,aA9BO,yBA8BO1D,IA9BP,EA8Ba;AAAA,YACVM,GADU,GACIN,IADJ,CACVM,GADU;AAAA,YACLD,IADK,GACIL,IADJ,CACLK,IADK;AAGlBC,QAAAA,GAAG,CAACqD,SAAJ,CAAc;AAAElD,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAEL;AAAX,SAAd;AACAC,QAAAA,GAAG,CAACsD,QAAJ,CAAa;AAAEnD,UAAAA,CAAC,EAAE,CAAL;AAAQC,UAAAA,CAAC,EAAE;AAAX,SAAb;AACD,OAnCM;AAoCPmD,MAAAA,cApCO,0BAoCQ7D,IApCR,SAoCsC;AAAA,YAAtB8D,EAAsB,SAAtBA,EAAsB;AAAA,YACnCxD,GADmC,GAC3BN,IAD2B,CACnCM,GADmC;AAAA,qBAGfA,GAAG,CAACI,CAHW;AAAA,YAGnCqD,MAHmC,UAGnCA,MAHmC;AAAA,YAG3BC,OAH2B,UAG3BA,OAH2B;;AAI3C,YAAIC,IAAI,CAACC,GAAL,CAASH,MAAT,KAAoBC,OAAxB,EAAiC;AAC/B1D,UAAAA,GAAG,CAACsD,QAAJ,CAAa;AAAEnD,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAEoD;AAAX,WAAb;AACD;AACF,OA3CM;AA4CPK,MAAAA,cA5CO,0BA4CQnE,IA5CR,SA4CsC;AAAA,YAAtB8D,EAAsB,SAAtBA,EAAsB;AAAA,YACnCxD,GADmC,GAC3BN,IAD2B,CACnCM,GADmC;AAAA,YAGnCyD,MAHmC,GAGxBzD,GAAG,CAACI,CAHoB,CAGnCqD,MAHmC;;AAI3C,YAAIA,MAAM,GAAG,CAAC,CAAd,EAAiB;AACfzD,UAAAA,GAAG,CAACsD,QAAJ,CAAa;AAAEnD,YAAAA,CAAC,EAAE,CAAL;AAAQC,YAAAA,CAAC,EAAEuD,IAAI,CAACG,GAAL,CAAS,CAAT,EAAYN,EAAZ;AAAX,WAAb;AACD;AACF,OAnDM;AAoDPO,MAAAA,gBApDO,4BAoDUrE,IApDV,EAoDgB;AAAA,YACbM,GADa,GACLN,IADK,CACbM,GADa;AAErBA,QAAAA,GAAG,CAACgE,aAAJ;AACD,OAvDM;AA2DPC,MAAAA,cA3DO,0BA2DQvE,IA3DR,EA2DcwE,OA3Dd,EA2D0D;AAC/DxE,QAAAA,IAAI,CAACG,YAAL,GAAoBqE,OAAO,CAACnG,MAA5B;AACA2B,QAAAA,IAAI,CAACE,WAAL,GAAmBsE,OAAO,CAACjG,KAA3B;AACAyB,QAAAA,IAAI,CAACI,WAAL,GAAmBoE,OAAO,CAACnG,MAAR,GAAiB,EAApC;AACD,OA/DM;AAgEPoG,MAAAA,aAhEO,2BAgES;AACdrF,QAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,OAlEM;AAmEPsF,MAAAA,kBAnEO,gCAmEc;AACnBrF,QAAAA,cAAc,IAAIA,cAAc,EAAhC;AACD;AArEM,KAxHiB;AA+L1BsF,IAAAA,MAAM,EAAE;AACAC,MAAAA,cADA,0BACe5E,IADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAEIM,gBAAAA,GAFJ,GAEYN,IAFZ,CAEIM,GAFJ;AAAA,iDAIG,IAAIuE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BvE,kBAAAA,QAAQ,CAACwE,MAAT,CAAgBzE,GAAhB,kCACK7B,kBADL;AAEE6E,oBAAAA,OAAO,EAAE;AAAE7C,sBAAAA,CAAC,EAAE,CAAL;AAAQC,sBAAAA,CAAC,EAAE;AAAX;AAFX,sBAGG6C,KAHH,CAGSuB,OAHT;AAID,iBALM,CAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWAE,MAAAA,cAXA,0BAWehF,IAXf;AAAA;AAAA;AAAA;AAAA;AAAA;AAYIM,gBAAAA,GAZJ,GAYuCN,IAZvC,CAYIM,GAZJ,EAYSO,WAZT,GAYuCb,IAZvC,CAYSa,WAZT,EAYsBV,YAZtB,GAYuCH,IAZvC,CAYsBG,YAZtB;AAcEO,gBAAAA,CAdF,GAeFG,WAAW,KAAK,UAAhB,GAA6BV,YAAY,GAAG,CAA5C,GAAgDA,YAAY,GAAG,CAf7D;AAAA,kDAiBG,IAAI0E,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BvE,kBAAAA,QAAQ,CAACwE,MAAT,CAAgBzE,GAAhB;AACEgD,oBAAAA,OAAO,EAAE;AAAE7C,sBAAAA,CAAC,EAAE,CAAL;AAAQC,sBAAAA,CAAC,EAADA;AAAR;AADX,qBAEKjC,kBAFL,GAGG8E,KAHH,CAGSuB,OAHT;AAID,iBALM,CAjBH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBAG,MAAAA,eAxBA,2BAwBgBjF,IAxBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBIM,gBAAAA,GAzBJ,GAyByBN,IAzBzB,CAyBIM,GAzBJ,EAyBSF,WAzBT,GAyByBJ,IAzBzB,CAyBSI,WAzBT;AAAA,kDA2BG,IAAIyE,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BvE,kBAAAA,QAAQ,CAACwE,MAAT,CAAgBzE,GAAhB;AACEgD,oBAAAA,OAAO,EAAE;AAAE7C,sBAAAA,CAAC,EAAE,CAAL;AAAQC,sBAAAA,CAAC,EAAEN;AAAX;AADX,qBAEK3B,kBAFL,GAGG8E,KAHH,CAGSuB,OAHT;AAID,iBALM,CA3BH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/LkB,GAAD,CAA3B;AAqOA,MAAMI,YAAY,GAAGpH,KAAK,CAACqH,OAAN,CACnB;AAAA,WACEC,YAAY,CAACC,MAAb,CAAoB;AAClBC,MAAAA,4BAA4B,EAAE;AAAA,eAAM,IAAN;AAAA,OADZ;AAElBC,MAAAA,mBAAmB,EAAE;AAAA,eAAMxF,KAAK,CAACyF,IAAN,CAAW,aAAX,CAAN;AAAA,OAFH;AAGlBC,MAAAA,kBAAkB,EAAE,4BAACC,CAAD;AAAA,YAAM5B,EAAN,SAAMA,EAAN;AAAA,eAAe/D,KAAK,CAACyF,IAAN,CAAW,WAAX,EAAwB;AAAE1B,UAAAA,EAAE,EAAFA;AAAF,SAAxB,CAAf;AAAA,OAHF;AAIlB6B,MAAAA,qBAAqB,EAAE,+BAACD,CAAD,SAAmB;AAAA,YAAb5B,EAAa,SAAbA,EAAa;AAAA,YAAT8B,EAAS,SAATA,EAAS;;AACxC,YAAI9B,EAAE,GAAG,CAAC,GAAN,IAAa8B,EAAE,GAAG,CAAC,GAAvB,EAA4B;AAC1B7F,UAAAA,KAAK,CAACyF,IAAN,CAAW,qBAAX;AACD,SAFD,MAEO,IAAI1B,EAAE,GAAG,GAAL,IAAY8B,EAAE,GAAG,GAArB,EAA0B;AAC/B7F,UAAAA,KAAK,CAACyF,IAAN,CAAW,uBAAX;AACD,SAFM,MAEA;AACLzF,UAAAA,KAAK,CAACyF,IAAN,CAAW,iBAAX;AACD;AACF;AAZiB,KAApB,CADF;AAAA,GADmB,EAgBnB,CAACzF,KAAD,CAhBmB,CAArB;AAoBAjC,EAAAA,KAAK,CAAC+H,SAAN,CAAgB,YAAM;AACpB,aAASC,aAAT,CAAuBC,KAAvB,EAAmC;AACjChG,MAAAA,KAAK,CAACyF,IAAN,CAAW,eAAX,EAA4B;AAAE9E,QAAAA,CAAC,EAAEqF,KAAK,CAACA;AAAX,OAA5B;AACD;;AAED,aAASC,mBAAT,GAA+B;AAAA,4BACH7H,UAAU,CAACC,GAAX,CAAe,QAAf,CADG;AAAA,UACrBC,MADqB,mBACrBA,MADqB;AAAA,UACbE,KADa,mBACbA,KADa;;AAE7BwB,MAAAA,KAAK,CAACyF,IAAN,CAAW,qBAAX,EAAkC;AAAEnH,QAAAA,MAAM,EAANA,MAAF;AAAUE,QAAAA,KAAK,EAALA;AAAV,OAAlC;AACD;;AAED,QAAM0H,EAAE,GAAGlG,KAAK,CAACC,IAAN,CAAWM,GAAX,CAAeI,CAAf,CAAiBwF,WAAjB,CAA6BJ,aAA7B,CAAX;AACA3H,IAAAA,UAAU,CAACgI,gBAAX,CAA4B,QAA5B,EAAsCH,mBAAtC;AAEA,WAAO,YAAM;AACXjG,MAAAA,KAAK,CAACC,IAAN,CAAWM,GAAX,CAAeI,CAAf,CAAiB0F,cAAjB,CAAgCH,EAAhC;AACA9H,MAAAA,UAAU,CAACkI,mBAAX,CAA+B,QAA/B,EAAyCL,mBAAzC;AACD,KAHD;AAID,GAjBD,EAiBG,CAACjG,KAAD,CAjBH;AAoBAjC,EAAAA,KAAK,CAAC+H,SAAN,CAAgB,YAAM;AACpB9F,IAAAA,KAAK,CAACyF,IAAN,CAAWlG,QAAQ,GAAG,QAAH,GAAc,QAAjC;AACD,GAFD,EAEG,CAACA,QAAD,CAFH;AAIAxB,EAAAA,KAAK,CAAC+H,SAAN,CAAgB,YAAM;AACpB5H,IAAAA,KAAK;AACL,WAAO;AAAA,aAAMA,KAAK,EAAX;AAAA,KAAP;AACD,GAHD,EAGG,EAHH;AAlRsB,oBA6RlB8B,KAAK,CAACC,IA7RY;AAAA,MAwRpBE,WAxRoB,eAwRpBA,WAxRoB;AAAA,MAyRpBC,YAzRoB,eAyRpBA,YAzRoB;AAAA,MA0RpBQ,eA1RoB,eA0RpBA,eA1RoB;AAAA,MA2RpBP,WA3RoB,eA2RpBA,WA3RoB;AAAA,MA4RpBE,GA5RoB,eA4RpBA,GA5RoB;AA+RtB,SAAOP,KAAK,CAACuG,IAAN,CAAW,QAAX,IAAuB,IAAvB,GACL,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CAACC,oBAAoB,CAACC,UAAtB,EAAkC;AAAEvG,MAAAA,MAAM,EAAEF,KAAK,CAACC,IAAN,CAAWC;AAArB,KAAlC,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLsG,oBAAoB,CAACC,UADhB,EAEL;AACEjI,MAAAA,KAAK,EAAE2B,WADT;AAEEuG,MAAAA,eAAe,EAAE,gBAFnB;AAGEpI,MAAAA,MAAM,EAAE8B,YAHV;AAIEuG,MAAAA,OAAO,EAAE/F;AAJX,KAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAcE,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL4F,oBAAoB,CAACI,KADhB,EAEL;AACEpI,MAAAA,KAAK,EAAEmB,SAAS,GAAGQ,WAAH,GAAiBA,WAAW,GAAG,EADjD;AAEE7B,MAAAA,MAAM,EAAE+B;AAFV,KAFK,EAML;AAAEwG,MAAAA,SAAS,EAAEtG,GAAG,CAACuG,qBAAJ;AAAb,KANK,EAOL3H,KAPK;AADT,KAUMgG,YAAY,CAAC4B,WAVnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYG,CAACnH,KAAD,IAAU,oBAAC,GAAD;AAAK,IAAA,QAAQ,EAAER,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZb,EAaE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEoH,oBAAoB,CAACQ,+BAD9B;AAEE,IAAA,aAAa,EAAEhH,KAAK,CAACuG,IAAN,CAAW,QAAX,IAAuB,MAAvB,GAAgC,MAFjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGxG,QAJH,CAbF,CAdF,CADF;AAqCD;;AAED,IAAMyG,oBAAoB,GAAGS,UAAU,CAAC3B,MAAX,CAAkB;AAC7CmB,EAAAA,UAAU,EAAE;AACVS,IAAAA,QAAQ,EAAE,UADA;AAEVhH,IAAAA,MAAM,EAAE,CAFE;AAGViH,IAAAA,MAAM,EAAE,CAHE;AAIVC,IAAAA,cAAc,EAAE,QAJN;AAKVC,IAAAA,UAAU,EAAE;AALF,GADiC;AAS7CT,EAAAA,KAAK,EAAE;AACLtI,IAAAA,MAAM,EAAEG,YADH;AAELD,IAAAA,KAAK,EAAED,UAAU,GAAG,EAFf;AAGLsI,IAAAA,SAAS,EAAE,CAAC;AAAES,MAAAA,UAAU,EAAE;AAAd,KAAD,CAHN;AAILC,IAAAA,OAAO,EAAE,MAJJ;AAKLC,IAAAA,aAAa,EAAE,QALV;AAMLd,IAAAA,eAAe,EAAE,OANZ;AAOLxG,IAAAA,MAAM,EAAE,CAPH;AAQLiH,IAAAA,MAAM,EAAE,CARH;AASLM,IAAAA,mBAAmB,EAAE,EAThB;AAULC,IAAAA,oBAAoB,EAAE,EAVjB;AAWLC,IAAAA,sBAAsB,EAAE,CAXnB;AAYLC,IAAAA,uBAAuB,EAAE,CAZpB;AAaLC,IAAAA,QAAQ,EAAE,QAbL;AAcLC,IAAAA,WAAW,EAAE,MAdR;AAeLC,IAAAA,YAAY,EAAE;AACZvJ,MAAAA,KAAK,EAAE,CADK;AAEZF,MAAAA,MAAM,EAAE;AAFI,KAfT;AAmBL0J,IAAAA,aAAa,EAAE,IAnBV;AAoBLC,IAAAA,YAAY,EAAE,GApBT;AAqBLC,IAAAA,SAAS,EAAE;AArBN,GATsC;AAgC7ClB,EAAAA,+BAA+B,EAAE;AAC/BxI,IAAAA,KAAK,EAAE,MADwB;AAE/B2J,IAAAA,IAAI,EAAE;AAFyB;AAhCY,CAAlB,CAA7B;AAsCA,IAAMC,0BAA0B,GAAG3J,YAAY,IAAIN,WAAW,GAAG,GAAlB,CAAZ,GAAqC,EAAxE;AACA,IAAMkK,0BAA0B,GAAG5J,YAAY,GAAG,EAAlD;AAEA,SACES,cADF,EAEEmJ,0BAFF,EAGED,0BAHF","sourcesContent":["import * as React from \"react\"\nimport { useLocalState } from \"@state-designer/react\"\nimport {\n  StyleSheet,\n  View,\n  Animated,\n  Dimensions,\n  PanResponder,\n} from \"react-native\"\n\nimport { Bar } from \"./bar\"\n\nlet stack = 0\n\nconst FULL_HEIGHT = Dimensions.get(\"window\").height\nconst FULL_WIDTH = Dimensions.get(\"window\").width\nconst PANEL_HEIGHT = FULL_HEIGHT - 52\nconst PANEL_ANIM_OPTIONS = {\n  tension: 160,\n  friction: 25,\n  useNativeDriver: true,\n  restDisplacementThreshold: 10,\n  restSpeedThreshold: 10,\n}\nconst BG_ANIM_OPTIONS = {\n  duration: 180,\n  useNativeDriver: true,\n}\n\ntype SwipeablePanelProps = {\n  isActive: boolean\n  stayOpen?: boolean\n  onClose?: () => void\n  onCloseAttempt?: () => void\n  showCloseButton?: boolean\n  fullWidth?: boolean\n  noBackgroundOpacity?: boolean\n  style?: object\n  closeOnTouchOutside?: boolean\n  onlyLarge?: boolean\n  onlySmall?: boolean\n  openLarge?: boolean\n  noBar?: boolean\n  barStyle?: object\n  allowTouchOutside?: boolean\n  showScrim?: boolean\n  children?: React.ReactNode\n}\n\nfunction SwipeablePanel({\n  style,\n  barStyle,\n  onClose,\n  onCloseAttempt,\n  isActive = false,\n  openLarge = true,\n  onlySmall = false,\n  onlyLarge = false,\n  fullWidth = true,\n  noBar = false,\n  stayOpen = false,\n  showScrim = false,\n  children,\n}: SwipeablePanelProps) {\n  const state = useLocalState({\n    data: {\n      zIndex: stack,\n      deviceWidth: FULL_WIDTH,\n      deviceHeight: FULL_HEIGHT,\n      panelHeight: FULL_HEIGHT - 52,\n      panY: FULL_HEIGHT / 2,\n      pan: new Animated.ValueXY({ x: 0, y: FULL_HEIGHT / 2 }),\n      animatedOpacity: new Animated.Value(0),\n      orientation: FULL_HEIGHT >= FULL_WIDTH ? \"portrait\" : \"landscape\",\n    },\n    on: {\n      MOVED_PANEL_Y: { secretlyDo: \"setPanY\" },\n      GRANTED_PAN: { secretlyDo: \"setInitialPan\" },\n      CHANGED_ORIENTATION: \"setDeviceSizes\",\n    },\n    initial: isActive ? \"open\" : \"closed\",\n    states: {\n      open: {\n        onEnter: \"showBackground\",\n        on: {\n          RELEASED_STABLE: { secretlyDo: \"flattenPanOffset\" },\n          RELEASED_SWIPING_UP: { secretlyDo: \"flattenPanOffset\" },\n          RELEASED_SWIPING_DOWN: { secretlyDo: \"flattenPanOffset\" },\n          CLOSED: { to: \"animatingToClosed\" },\n        },\n        initial: \"animating\",\n        states: {\n          stable: {\n            initial: \"large\",\n            states: {\n              large: {\n                on: {\n                  MOVED_PAN: { secretlyDo: \"updatePanLarge\" },\n                  RELEASED_STABLE: { to: \"animatingToLarge\" },\n                  RELEASED_SWIPING_UP: {\n                    unless: \"isOnlySmall\",\n                    to: \"animatingToLarge\",\n                  },\n                  RELEASED_SWIPING_DOWN: {\n                    if: \"canClose\",\n                    to: \"animatingToClosed\",\n                    else: [\n                      \"handleCloseAttempt\",\n                      {\n                        if: \"isOnlyLarge\",\n                        to: \"animatingToLarge\",\n                        else: { to: \"animatingToSmall\" },\n                      },\n                    ],\n                  },\n                },\n              },\n              small: {\n                on: {\n                  MOVED_PAN: { secretlyDo: \"updatePanSmall\" },\n                  RELEASED_STABLE: { to: \"animatingToSmall\" },\n                  RELEASED_SWIPING_UP: {\n                    if: \"isOnlySmall\",\n                    to: \"animatingToSmall\",\n                    else: { to: \"animatingToLarge\" },\n                  },\n                  RELEASED_SWIPING_DOWN: [\n                    {\n                      if: \"canClose\",\n                      to: \"animatingToClosed\",\n                      else: {\n                        do: \"handleCloseAttempt\",\n                        to: \"animatingToSmall\",\n                      },\n                    },\n                  ],\n                },\n              },\n            },\n          },\n          animating: {\n            onEnter: [\"stopAnimations\", \"showBackground\"],\n            initial: openLarge ? \"animatingToLarge\" : \"animatingToSmall\",\n            states: {\n              animatingToLarge: {\n                async: {\n                  await: \"animateToLarge\",\n                  onResolve: { to: \"large\" },\n                },\n              },\n              animatingToSmall: {\n                async: {\n                  await: \"animateToSmall\",\n                  onResolve: { to: \"small\" },\n                },\n              },\n            },\n          },\n          animatingToClosed: {\n            onEnter: [\"hideBackground\"],\n            async: {\n              await: \"animateToClosed\",\n              onResolve: { do: \"notifyOnClose\", to: \"closed\" },\n            },\n          },\n        },\n      },\n      closed: {\n        on: {\n          OPENED: { to: \"open\" },\n        },\n      },\n    },\n    conditions: {\n      isOnlySmall() {\n        return onlySmall\n      },\n      isOnlyLarge() {\n        return onlyLarge\n      },\n      canClose() {\n        return !stayOpen\n      },\n    },\n    actions: {\n      /* ------------------- Animations ------------------- */\n\n      stopAnimations(data) {\n        const { animatedOpacity, pan } = data\n        animatedOpacity.stopAnimation()\n        pan.stopAnimation()\n      },\n      showBackground(data) {\n        const { animatedOpacity } = data\n\n        Animated.timing(animatedOpacity, {\n          toValue: 1,\n          ...BG_ANIM_OPTIONS,\n        }).start()\n      },\n      hideBackground(data) {\n        const { animatedOpacity } = data\n\n        Animated.timing(animatedOpacity, {\n          toValue: 0,\n          ...BG_ANIM_OPTIONS,\n        }).start()\n      },\n\n      /* --------------------- Panning -------------------- */\n\n      setPanY(data, { y }: { y: number }) {\n        data.panY = y\n      },\n      setInitialPan(data) {\n        const { pan, panY } = data\n        // @ts-ignore\n        pan.setOffset({ x: 0, y: panY })\n        pan.setValue({ x: 0, y: 0 })\n      },\n      updatePanSmall(data, { dy }: { dy: number }) {\n        const { pan } = data\n        // @ts-ignore\n        const { _value, _offset } = pan.y\n        if (Math.abs(_value) <= _offset) {\n          pan.setValue({ x: 0, y: dy })\n        }\n      },\n      updatePanLarge(data, { dy }: { dy: number }) {\n        const { pan } = data\n        // @ts-ignore\n        const { _value } = pan.y\n        if (_value > -1) {\n          pan.setValue({ x: 0, y: Math.max(0, dy) })\n        }\n      },\n      flattenPanOffset(data) {\n        const { pan } = data\n        pan.flattenOffset()\n      },\n\n      /* ----------------------- Etc ---------------------- */\n\n      setDeviceSizes(data, payload: { width: number; height: number }) {\n        data.deviceHeight = payload.height\n        data.deviceWidth = payload.width\n        data.panelHeight = payload.height - 52\n      },\n      notifyOnClose() {\n        onClose && onClose()\n      },\n      handleCloseAttempt() {\n        onCloseAttempt && onCloseAttempt()\n      },\n    },\n    asyncs: {\n      async animateToLarge(data) {\n        const { pan } = data\n\n        return new Promise((resolve) => {\n          Animated.spring(pan, {\n            ...PANEL_ANIM_OPTIONS,\n            toValue: { x: 0, y: 0 },\n          }).start(resolve)\n        })\n      },\n      async animateToSmall(data) {\n        const { pan, orientation, deviceHeight } = data\n\n        const y =\n          orientation === \"portrait\" ? deviceHeight / 2 : deviceHeight / 3\n\n        return new Promise((resolve) => {\n          Animated.spring(pan, {\n            toValue: { x: 0, y },\n            ...PANEL_ANIM_OPTIONS,\n          }).start(resolve)\n        })\n      },\n      async animateToClosed(data) {\n        const { pan, panelHeight } = data\n\n        return new Promise((resolve) => {\n          Animated.spring(pan, {\n            toValue: { x: 0, y: panelHeight },\n            ...PANEL_ANIM_OPTIONS,\n          }).start(resolve)\n        })\n      },\n    },\n  })\n\n  // A stable pan responder, used to create pan handlers\n  const panResponder = React.useMemo(\n    () =>\n      PanResponder.create({\n        onStartShouldSetPanResponder: () => true,\n        onPanResponderGrant: () => state.send(\"GRANTED_PAN\"),\n        onPanResponderMove: (_, { dy }) => state.send(\"MOVED_PAN\", { dy }),\n        onPanResponderRelease: (_, { dy, vy }) => {\n          if (dy < -100 || vy < -0.5) {\n            state.send(\"RELEASED_SWIPING_UP\")\n          } else if (dy > 100 || vy > 0.5) {\n            state.send(\"RELEASED_SWIPING_DOWN\")\n          } else {\n            state.send(\"RELEASED_STABLE\")\n          }\n        },\n      }),\n    [state]\n  )\n\n  // Set listeners on component mount\n  React.useEffect(() => {\n    function handleYChange(value: any) {\n      state.send(\"MOVED_PANEL_Y\", { y: value.value })\n    }\n\n    function onOrientationChange() {\n      const { height, width } = Dimensions.get(\"screen\")\n      state.send(\"CHANGED_ORIENTATION\", { height, width })\n    }\n\n    const id = state.data.pan.y.addListener(handleYChange)\n    Dimensions.addEventListener(\"change\", onOrientationChange)\n\n    return () => {\n      state.data.pan.y.removeListener(id)\n      Dimensions.removeEventListener(\"change\", onOrientationChange)\n    }\n  }, [state])\n\n  // Handle change in `isActive` prop\n  React.useEffect(() => {\n    state.send(isActive ? \"OPENED\" : \"CLOSED\")\n  }, [isActive])\n\n  React.useEffect(() => {\n    stack++\n    return () => stack--\n  }, [])\n\n  const {\n    deviceWidth,\n    deviceHeight,\n    animatedOpacity,\n    panelHeight,\n    pan,\n  } = state.data\n\n  return state.isIn(\"closed\") ? null : (\n    <Animated.View\n      style={[SwipeablePanelStyles.background, { zIndex: state.data.zIndex }]}\n    >\n      <Animated.View\n        style={[\n          SwipeablePanelStyles.background,\n          {\n            width: deviceWidth,\n            backgroundColor: \"rgba(0,0,0,.5)\",\n            height: deviceHeight,\n            opacity: animatedOpacity,\n          },\n        ]}\n      />\n      <Animated.View\n        style={[\n          SwipeablePanelStyles.panel,\n          {\n            width: fullWidth ? deviceWidth : deviceWidth - 50,\n            height: panelHeight,\n          },\n          { transform: pan.getTranslateTransform() },\n          style,\n        ]}\n        {...panResponder.panHandlers}\n      >\n        {!noBar && <Bar barStyle={barStyle} />}\n        <View\n          style={SwipeablePanelStyles.scrollViewContentContainerStyle}\n          pointerEvents={state.isIn(\"stable\") ? \"auto\" : \"none\"}\n        >\n          {children}\n        </View>\n      </Animated.View>\n    </Animated.View>\n  )\n}\n\nconst SwipeablePanelStyles = StyleSheet.create({\n  background: {\n    position: \"absolute\",\n    zIndex: 1,\n    bottom: 0,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // backgroundColor: \"rgba(0,0,0,0.5)\",\n  },\n  panel: {\n    height: PANEL_HEIGHT,\n    width: FULL_WIDTH - 50,\n    transform: [{ translateY: 0 }],\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"white\",\n    zIndex: 2,\n    bottom: 0,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n    borderBottomLeftRadius: 0,\n    borderBottomRightRadius: 0,\n    overflow: \"hidden\",\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.18,\n    shadowRadius: 1.0,\n    elevation: 1,\n  },\n  scrollViewContentContainerStyle: {\n    width: \"100%\",\n    flex: 1,\n  },\n})\n\nconst SMALL_PANEL_CONTENT_HEIGHT = PANEL_HEIGHT - (FULL_HEIGHT - 400) - 52\nconst LARGE_PANEL_CONTENT_HEIGHT = PANEL_HEIGHT - 52\n\nexport {\n  SwipeablePanel,\n  LARGE_PANEL_CONTENT_HEIGHT,\n  SMALL_PANEL_CONTENT_HEIGHT,\n}\n"]},"metadata":{},"sourceType":"module"}