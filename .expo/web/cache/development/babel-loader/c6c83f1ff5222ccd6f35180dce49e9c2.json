{"ast":null,"code":"var _jsxFileName = \"/Users/steveruiz/GitHub/play-rn-prototype/src/screens/in-progress-test.tsx\";\nimport * as React from \"react\";\nimport * as Panel from \"../components/panel\";\nimport { Spacers } from \"../components/styled\";\nimport UserButton from \"../components/user-button\";\nimport SectionTitle from \"../components/section-title\";\nimport CopyLinkButton from \"../components/copy-link-button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport useAppState, { send } from \"../hooks/useAppState\";\nimport FakeInput from \"../components/fake-input\";\nimport useStaleSelectedTest from \"../hooks/useStaleSelectedTest\";\nexport default function InProgressScreen() {\n  var _this = this;\n\n  var local = useAppState();\n  var selectedTest = useStaleSelectedTest(local.values.selectedTest);\n  if (!selectedTest) return null;\n  return React.createElement(Panel.Container, {\n    id: \"inProgressTest\",\n    isOpen: local.isIn(\"inProgressTest\"),\n    onClose: function onClose() {\n      return send(\"CLOSED_PANEL\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(Panel.Header, {\n    title: selectedTest == null ? void 0 : selectedTest.name,\n    leftButton: {\n      icon: \"arrow-left\",\n      onPress: function onPress() {\n        return send(\"CLOSED_PANEL\");\n      }\n    },\n    rightAction: {\n      title: \"End Test\",\n      onPress: function onPress() {}\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    style: styles.Content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Invitation Link\"), React.createElement(CopyLinkButton, {\n    test: selectedTest,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }), React.createElement(Spacers.M, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }), React.createElement(SectionTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"Send Invitations\"), React.createElement(FakeInput, {\n    placeholder: \"E-mail\",\n    onPress: function onPress() {\n      return send(\"STARTED_SEARCHING_FOR_USERS\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }), React.createElement(Spacers.M, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), selectedTest.invitedUsers.map(function (user) {\n    return React.createElement(UserButton, {\n      key: user.id,\n      user: user,\n      onPress: function onPress() {\n        return send(\"OPENED_USER_DIALOG\", {\n          user: user\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    });\n  }), React.createElement(Spacers.M, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 11\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  Content: {\n    paddingHorizontal: 16\n  }\n});","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/screens/in-progress-test.tsx"],"names":["React","Panel","Spacers","UserButton","SectionTitle","CopyLinkButton","useAppState","send","FakeInput","useStaleSelectedTest","InProgressScreen","local","selectedTest","values","isIn","name","icon","onPress","title","styles","Content","invitedUsers","map","user","id","StyleSheet","create","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport * as Panel from \"@components/panel\"\nimport { Spacers } from \"@components/styled\"\nimport UserButton from \"@components/user-button\"\nimport Input from \"@components/input\"\nimport SectionTitle from \"@components/section-title\"\nimport CopyLinkButton from \"@components/copy-link-button\"\nimport { StyleSheet, ScrollView } from \"react-native\"\nimport useAppState, { send } from \"@hooks/useAppState\"\nimport FakeInput from \"@components/fake-input\"\nimport * as Types from \"types\"\nimport useStaleSelectedTest from \"@hooks/useStaleSelectedTest\"\n\nexport default function InProgressScreen() {\n  const local = useAppState()\n  const selectedTest = useStaleSelectedTest(local.values.selectedTest)\n\n  if (!selectedTest) return null\n\n  return (\n    <Panel.Container\n      id=\"inProgressTest\"\n      isOpen={local.isIn(\"inProgressTest\")}\n      onClose={() => send(\"CLOSED_PANEL\")}\n    >\n      <Panel.Header\n        title={selectedTest?.name}\n        leftButton={{\n          icon: \"arrow-left\",\n          onPress: () => send(\"CLOSED_PANEL\"),\n        }}\n        rightAction={{\n          title: \"End Test\",\n          onPress: () => {},\n        }}\n      />\n      <ScrollView style={styles.Content}>\n        <React.Fragment>\n          <SectionTitle>Invitation Link</SectionTitle>\n          <CopyLinkButton test={selectedTest} />\n          <Spacers.M />\n          <SectionTitle>Send Invitations</SectionTitle>\n          <FakeInput\n            placeholder=\"E-mail\"\n            onPress={() => send(\"STARTED_SEARCHING_FOR_USERS\")}\n          />\n          <Spacers.M></Spacers.M>\n          {selectedTest.invitedUsers.map((user) => (\n            <UserButton\n              key={user.id}\n              user={user}\n              onPress={() => send(\"OPENED_USER_DIALOG\", { user })}\n            />\n          ))}\n          <Spacers.M />\n        </React.Fragment>\n      </ScrollView>\n    </Panel.Container>\n  )\n}\n\nconst styles = StyleSheet.create({\n  Content: {\n    paddingHorizontal: 16,\n  },\n})\n"]},"metadata":{},"sourceType":"module"}