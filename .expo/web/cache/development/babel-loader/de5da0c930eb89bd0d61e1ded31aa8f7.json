{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport debounce from \"lodash/debounce\";\n\nvar Grid = function () {\n  function Grid() {\n    _classCallCheck(this, Grid);\n\n    this.rows = [];\n    this.width = 0;\n    this.height = 0;\n    this.chars = {\n      active: [\"┌\", \"─\", \"┒\", \"┃\", \"┛\", \"━\", \"┕\", \"│\"],\n      inactive: [\"┌\", \"─\", \"┐\", \"│\", \"┘\", \"─\", \"└\", \"│\"],\n      root: [\"┌\", \"╌\", \"┐\", \"╎\", \"┘\", \"╌\", \"└\", \"╎\"]\n    };\n  }\n\n  _createClass(Grid, [{\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this.rows = Array.from(Array(height)).map(function () {\n        return Array.from(Array(width)).map(function () {\n          return {\n            char: \" \",\n            node: undefined\n          };\n        });\n      });\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(char, col, row, node) {\n      if (this.rows[row] === undefined) this.rows[row] = [];\n      this.rows[row][col] = {\n        char: char,\n        node: node\n      };\n    }\n  }, {\n    key: \"drawRect\",\n    value: function drawRect(x, y, width, height, style, node) {\n      var i;\n      var chars = this.chars[style];\n      this.insert(chars[0], x, y, node);\n      this.insert(chars[2], x + width, y, node);\n      this.insert(chars[4], x + width, y + height, node);\n      this.insert(chars[6], x, y + height, node);\n\n      for (i = 1; i < width; i++) {\n        this.insert(chars[1], x + i, y, node);\n        this.insert(chars[5], x + i, y + height, node);\n      }\n\n      for (i = 1; i < height; i++) {\n        this.insert(chars[7], x, y + i, node);\n        this.insert(chars[3], x + width, y + i, node);\n      }\n    }\n  }, {\n    key: \"drawText\",\n    value: function drawText(text, x, y, node) {\n      for (var i = 0; i < text.length; i++) {\n        this.insert(text[i], x + i, y, node);\n      }\n    }\n  }, {\n    key: \"drawNode\",\n    value: function drawNode(node) {\n      var x = node.x,\n          y = node.y,\n          width = node.width,\n          height = node.height,\n          type = node.type,\n          state = node.state,\n          name = node.name;\n      var style = type === \"root\" ? \"root\" : state.active ? \"active\" : \"inactive\";\n\n      if (node.hasChildren) {\n        this.drawRect(x, y, width, height, style, node);\n        this.insert(\" \", x + 1, y, node);\n        this.insert(\" \", x + name.length + 2, y, node);\n        this.drawText(name, x + 2, y, node);\n      } else {\n        this.drawText(name, x, y, node);\n      }\n\n      for (var _iterator = _createForOfIteratorHelperLoose(node.children), _step; !(_step = _iterator()).done;) {\n        var child = _step.value;\n        this.drawNode(child);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.rows.map(function (row) {\n        return row.map(function (cell) {\n          var _cell$node;\n\n          return cell ? ((_cell$node = cell.node) == null ? void 0 : _cell$node.state.active) ? cell.char : \"\\x1B[38;2;144;144;144m\" + cell.char + \"\\x1B[0m\" : \" \";\n        }).join(\"\");\n      }).join(\"\\n\"));\n    }\n  }, {\n    key: \"init\",\n    value: function init(node) {\n      node.moveTo(0, 0);\n      this.setSize(node.width, node.height);\n      this.drawNode(node);\n      this.render();\n    }\n  }]);\n\n  return Grid;\n}();\n\nvar grid = new Grid();\n\nvar TNode = function () {\n  function TNode(state, parent) {\n    var _this = this;\n\n    _classCallCheck(this, TNode);\n\n    this.x = 0;\n    this.y = 0;\n    this.state = state;\n    this.name = state.name;\n    this.parent = parent;\n    this.children = Object.values(state.states).map(function (s) {\n      return new TNode(s, _this);\n    });\n  }\n\n  _createClass(TNode, [{\n    key: \"moveTo\",\n    value: function moveTo(x, y) {\n      this.x = x;\n      this.y = y;\n      var sx = x + 2;\n      var sy = y + 1;\n\n      for (var i = 0; i < this.children.length; i++) {\n        var child = this.children[i];\n        child.moveTo(sx, sy);\n        var mx = child.width + (child.type === \"leaf\" ? 1 : 2);\n        var my = child.height + (child.type === \"leaf\" ? 0 : 1);\n\n        if (i % 2 === 0) {\n          sx += mx;\n        } else {\n          sx = x + 2;\n          sy += my;\n        }\n      }\n    }\n  }, {\n    key: \"maxX\",\n    get: function get() {\n      return this.x + this.width;\n    }\n  }, {\n    key: \"maxY\",\n    get: function get() {\n      return this.y + this.height;\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      if (!this.hasChildren) {\n        return this.name.length;\n      }\n\n      var cx = Math.max.apply(Math, [this.x + this.name.length + 5].concat(_toConsumableArray(this.children.map(function (c) {\n        return c.maxX;\n      }))));\n      if (this.children.find(function (c) {\n        return c.type === \"branch\";\n      })) cx++;\n      cx++;\n      return cx - this.x;\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      if (!this.hasChildren) {\n        return 1;\n      }\n\n      var cy = Math.max.apply(Math, _toConsumableArray(this.children.map(function (c) {\n        return c.maxY;\n      })));\n      if (cy > this.y + 3) cy++;\n      return cy - this.y;\n    }\n  }, {\n    key: \"hasChildren\",\n    get: function get() {\n      return this.children.length > 0;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      if (!this.parent) return \"root\";\n      if (this.children.length === 0) return \"leaf\";\n      return \"branch\";\n    }\n  }]);\n\n  return TNode;\n}();\n\nexport function renderState(state) {\n  var tree = new TNode(state.stateTree);\n  grid.init(tree);\n  grid.render();\n  state.onUpdate(debounce(function () {\n    grid.render();\n    console.log(state.log[0]);\n  }, 100));\n}","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/renderState.ts"],"names":["debounce","Grid","rows","width","height","chars","active","inactive","root","Array","from","map","char","node","undefined","col","row","x","y","style","i","insert","text","length","type","state","name","hasChildren","drawRect","drawText","children","child","drawNode","console","log","cell","join","moveTo","setSize","render","grid","TNode","parent","Object","values","states","s","sx","sy","mx","my","cx","Math","max","c","maxX","find","cy","maxY","renderState","tree","stateTree","init","onUpdate"],"mappings":"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","sourcesContent":["import debounce from \"lodash/debounce\"\nimport { S } from \"@state-designer/react\"\n\ntype NodeType = \"leaf\" | \"branch\" | \"root\"\n\nclass Grid {\n  rows = [] as { char: string; node?: TNode }[][]\n  width = 0\n  height = 0\n\n  chars = {\n    active: [\"┌\", \"─\", \"┒\", \"┃\", \"┛\", \"━\", \"┕\", \"│\"],\n    inactive: [\"┌\", \"─\", \"┐\", \"│\", \"┘\", \"─\", \"└\", \"│\"],\n    root: [\"┌\", \"╌\", \"┐\", \"╎\", \"┘\", \"╌\", \"└\", \"╎\"],\n  }\n\n  setSize(width: number, height: number) {\n    this.rows = Array.from(Array(height)).map(() =>\n      Array.from(Array(width)).map(() => ({ char: \" \", node: undefined }))\n    )\n  }\n\n  insert(char: string, col: number, row: number, node: TNode) {\n    if (this.rows[row] === undefined) this.rows[row] = []\n    this.rows[row][col] = { char, node }\n  }\n\n  drawRect(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    style: \"active\" | \"inactive\" | \"root\",\n    node: TNode\n  ) {\n    let i: number\n    const chars = this.chars[style]\n    this.insert(chars[0], x, y, node)\n    this.insert(chars[2], x + width, y, node)\n    this.insert(chars[4], x + width, y + height, node)\n    this.insert(chars[6], x, y + height, node)\n    for (i = 1; i < width; i++) {\n      this.insert(chars[1], x + i, y, node)\n      this.insert(chars[5], x + i, y + height, node)\n    }\n    for (i = 1; i < height; i++) {\n      this.insert(chars[7], x, y + i, node)\n      this.insert(chars[3], x + width, y + i, node)\n    }\n  }\n\n  drawText(text: string, x: number, y: number, node: TNode) {\n    for (let i = 0; i < text.length; i++) {\n      this.insert(text[i], x + i, y, node)\n    }\n  }\n\n  drawNode(node: TNode) {\n    const { x, y, width, height, type, state, name } = node\n    const style =\n      type === \"root\" ? \"root\" : state.active ? \"active\" : \"inactive\"\n    if (node.hasChildren) {\n      this.drawRect(x, y, width, height, style, node)\n      this.insert(\" \", x + 1, y, node)\n      this.insert(\" \", x + name.length + 2, y, node)\n      this.drawText(name, x + 2, y, node)\n    } else {\n      this.drawText(name, x, y, node)\n    }\n\n    for (let child of node.children) {\n      this.drawNode(child)\n    }\n  }\n\n  render() {\n    console.log(\n      this.rows\n        .map((row) =>\n          row\n            .map((cell) =>\n              cell\n                ? cell.node?.state.active\n                  ? cell.char\n                  : `\\x1b[38;2;144;144;144m${cell.char}\\x1b[0m`\n                : \" \"\n            )\n            .join(\"\")\n        )\n        .join(\"\\n\")\n    )\n  }\n\n  init(node: TNode) {\n    node.moveTo(0, 0)\n    this.setSize(node.width, node.height)\n    this.drawNode(node)\n    this.render()\n  }\n}\n\nconst grid = new Grid()\n\nclass TNode {\n  name: string\n  parent: TNode | undefined\n  state: S.State<any, any>\n  children: TNode[]\n  x = 0\n  y = 0\n\n  constructor(state: S.State<any, any>, parent?: TNode) {\n    this.state = state\n    this.name = state.name\n    this.parent = parent\n    this.children = Object.values(state.states).map((s) => new TNode(s, this))\n  }\n\n  get maxX() {\n    return this.x + this.width\n  }\n\n  get maxY() {\n    return this.y + this.height\n  }\n\n  get width() {\n    if (!this.hasChildren) {\n      return this.name.length\n    }\n\n    let cx = Math.max(\n      this.x + this.name.length + 5,\n      ...this.children.map((c) => c.maxX)\n    )\n\n    if (this.children.find((c) => c.type === \"branch\")) cx++\n\n    cx++\n\n    return cx - this.x\n  }\n\n  get height() {\n    if (!this.hasChildren) {\n      return 1\n    }\n\n    let cy = Math.max(...this.children.map((c) => c.maxY))\n    if (cy > this.y + 3) cy++\n\n    return cy - this.y\n  }\n\n  get hasChildren() {\n    return this.children.length > 0\n  }\n\n  get type(): NodeType {\n    if (!this.parent) return \"root\"\n    if (this.children.length === 0) return \"leaf\"\n    return \"branch\"\n  }\n\n  moveTo(x: number, y: number) {\n    this.x = x\n    this.y = y\n\n    let sx = x + 2\n    let sy = y + 1\n\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i]\n\n      child.moveTo(sx, sy)\n\n      let mx = child.width + (child.type === \"leaf\" ? 1 : 2)\n      let my = child.height + (child.type === \"leaf\" ? 0 : 1)\n\n      if (i % 2 === 0) {\n        sx += mx\n      } else {\n        sx = x + 2\n        sy += my\n      }\n    }\n  }\n}\n\nexport function renderState(state: S.DesignedState<any, any>) {\n  const tree = new TNode(state.stateTree)\n  grid.init(tree)\n  grid.render()\n  state.onUpdate(\n    debounce(() => {\n      grid.render()\n      console.log(state.log[0])\n    }, 100)\n  )\n}\n"]},"metadata":{},"sourceType":"module"}