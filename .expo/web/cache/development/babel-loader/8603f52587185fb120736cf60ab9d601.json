{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/steveruiz/GitHub/play-rn-prototype/node_modules/react-native-dialog/src/Button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nvar COLOR = Platform.OS === \"ios\" ? \"#007ff9\" : \"#169689\";\n\nvar DialogButton = function DialogButton(props) {\n  var label = props.label,\n      color = props.color,\n      disabled = props.disabled,\n      bold = props.bold,\n      onPress = props.onPress,\n      style = props.style,\n      nodeProps = _objectWithoutProperties(props, [\"label\", \"color\", \"disabled\", \"bold\", \"onPress\", \"style\"]);\n\n  var fontWeight = bold ? \"600\" : \"normal\";\n  return React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onPress,\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, _extends({\n    style: [styles.text, {\n      color: color,\n      fontWeight: fontWeight\n    }, style]\n  }, nodeProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }), Platform.OS === \"ios\" ? label : label.toUpperCase()));\n};\n\nDialogButton.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  label: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  bold: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func.isRequired\n});\nDialogButton.defaultProps = {\n  color: COLOR,\n  disabled: false\n};\nDialogButton.displayName = \"DialogButton\";\nvar styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    android: {\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    web: {\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }\n  }),\n  text: Platform.select({\n    ios: {\n      textAlign: \"center\",\n      fontSize: 17,\n      backgroundColor: \"transparent\"\n    },\n    android: {\n      textAlign: \"center\",\n      backgroundColor: \"transparent\",\n      padding: 8,\n      fontSize: 14\n    },\n    web: {\n      textAlign: \"center\",\n      backgroundColor: \"transparent\",\n      padding: 8,\n      fontSize: 14\n    }\n  })\n});\nexport default DialogButton;","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/node_modules/react-native-dialog/src/Button.js"],"names":["PropTypes","React","COLOR","Platform","OS","DialogButton","props","label","color","disabled","bold","onPress","style","nodeProps","fontWeight","styles","button","text","toUpperCase","propTypes","Text","string","isRequired","bool","func","defaultProps","displayName","StyleSheet","create","select","ios","flex","justifyContent","alignItems","android","web","textAlign","fontSize","backgroundColor","padding"],"mappings":";;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;AAGA,IAAMC,KAAK,GAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,SAAxB,GAAoC,SAAlD;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAAA,MACtBC,KADsB,GACyCD,KADzC,CACtBC,KADsB;AAAA,MACfC,KADe,GACyCF,KADzC,CACfE,KADe;AAAA,MACRC,QADQ,GACyCH,KADzC,CACRG,QADQ;AAAA,MACEC,IADF,GACyCJ,KADzC,CACEI,IADF;AAAA,MACQC,OADR,GACyCL,KADzC,CACQK,OADR;AAAA,MACiBC,KADjB,GACyCN,KADzC,CACiBM,KADjB;AAAA,MAC2BC,SAD3B,4BACyCP,KADzC;;AAE9B,MAAMQ,UAAU,GAAGJ,IAAI,GAAG,KAAH,GAAW,QAAlC;AACA,SACE,oBAAC,gBAAD;AACE,IAAA,KAAK,EAAEK,MAAM,CAACC,MADhB;AAEE,IAAA,OAAO,EAAEL,OAFX;AAGE,IAAA,QAAQ,EAAEF,QAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE,CAACM,MAAM,CAACE,IAAR,EAAc;AAAET,MAAAA,KAAK,EAAEA,KAAT;AAAgBM,MAAAA,UAAU,EAAEA;AAA5B,KAAd,EAAwDF,KAAxD;AADT,KAEMC,SAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAIGV,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBG,KAAxB,GAAgCA,KAAK,CAACW,WAAN,EAJnC,CALF,CADF;AAcD,CAjBD;;AAmBAb,YAAY,CAACc,SAAb,mCACKC,IAAI,CAACD,SADV;AAEEZ,EAAAA,KAAK,EAAEP,SAAS,CAACqB,MAAV,CAAiBC,UAF1B;AAGEd,EAAAA,KAAK,EAAER,SAAS,CAACqB,MAHnB;AAIEX,EAAAA,IAAI,EAAEV,SAAS,CAACuB,IAJlB;AAKEd,EAAAA,QAAQ,EAAET,SAAS,CAACuB,IALtB;AAMEZ,EAAAA,OAAO,EAAEX,SAAS,CAACwB,IAAV,CAAeF;AAN1B;AASAjB,YAAY,CAACoB,YAAb,GAA4B;AAC1BjB,EAAAA,KAAK,EAAEN,KADmB;AAE1BO,EAAAA,QAAQ,EAAE;AAFgB,CAA5B;AAKAJ,YAAY,CAACqB,WAAb,GAA2B,cAA3B;AAEA,IAAMX,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC/BZ,EAAAA,MAAM,EAAEb,QAAQ,CAAC0B,MAAT,CAAgB;AACtBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,IAAI,EAAE,CADH;AAEHC,MAAAA,cAAc,EAAE,QAFb;AAGHC,MAAAA,UAAU,EAAE;AAHT,KADiB;AAMtBC,IAAAA,OAAO,EAAE;AACPF,MAAAA,cAAc,EAAE,QADT;AAEPC,MAAAA,UAAU,EAAE;AAFL,KANa;AAUtBE,IAAAA,GAAG,EAAE;AACHH,MAAAA,cAAc,EAAE,QADb;AAEHC,MAAAA,UAAU,EAAE;AAFT;AAViB,GAAhB,CADuB;AAgB/BhB,EAAAA,IAAI,EAAEd,QAAQ,CAAC0B,MAAT,CAAgB;AACpBC,IAAAA,GAAG,EAAE;AACHM,MAAAA,SAAS,EAAE,QADR;AAEHC,MAAAA,QAAQ,EAAE,EAFP;AAGHC,MAAAA,eAAe,EAAE;AAHd,KADe;AAMpBJ,IAAAA,OAAO,EAAE;AACPE,MAAAA,SAAS,EAAE,QADJ;AAEPE,MAAAA,eAAe,EAAE,aAFV;AAGPC,MAAAA,OAAO,EAAE,CAHF;AAIPF,MAAAA,QAAQ,EAAE;AAJH,KANW;AAYpBF,IAAAA,GAAG,EAAE;AACHC,MAAAA,SAAS,EAAE,QADR;AAEHE,MAAAA,eAAe,EAAE,aAFd;AAGHC,MAAAA,OAAO,EAAE,CAHN;AAIHF,MAAAA,QAAQ,EAAE;AAJP;AAZe,GAAhB;AAhByB,CAAlB,CAAf;AAqCA,eAAehC,YAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Platform, StyleSheet, Text, TouchableOpacity } from \"react-native\";\n\nconst COLOR = Platform.OS === \"ios\" ? \"#007ff9\" : \"#169689\";\n\nconst DialogButton = (props) => {\n  const { label, color, disabled, bold, onPress, style, ...nodeProps } = props;\n  const fontWeight = bold ? \"600\" : \"normal\";\n  return (\n    <TouchableOpacity\n      style={styles.button}\n      onPress={onPress}\n      disabled={disabled}\n    >\n      <Text\n        style={[styles.text, { color: color, fontWeight: fontWeight }, style]}\n        {...nodeProps}\n      >\n        {Platform.OS === \"ios\" ? label : label.toUpperCase()}\n      </Text>\n    </TouchableOpacity>\n  );\n};\n\nDialogButton.propTypes = {\n  ...Text.propTypes,\n  label: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  bold: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func.isRequired,\n};\n\nDialogButton.defaultProps = {\n  color: COLOR,\n  disabled: false,\n};\n\nDialogButton.displayName = \"DialogButton\";\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    android: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    web: {\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      textAlign: \"center\",\n      fontSize: 17,\n      backgroundColor: \"transparent\",\n    },\n    android: {\n      textAlign: \"center\",\n      backgroundColor: \"transparent\",\n      padding: 8,\n      fontSize: 14,\n    },\n    web: {\n      textAlign: \"center\",\n      backgroundColor: \"transparent\",\n      padding: 8,\n      fontSize: 14,\n    },\n  }),\n});\n\nexport default DialogButton;\n"]},"metadata":{},"sourceType":"module"}