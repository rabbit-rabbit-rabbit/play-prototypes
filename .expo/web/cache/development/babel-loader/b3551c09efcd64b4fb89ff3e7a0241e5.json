{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/steveruiz/GitHub/play-rn-prototype/src/components/input.tsx\";\nimport * as React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\n\nfunction Input(_ref, ref) {\n  var onChange = _ref.onChange,\n      value = _ref.value,\n      lines = _ref.lines,\n      placeholder = _ref.placeholder;\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      text = _React$useState2[0],\n      setText = _React$useState2[1];\n\n  React.useEffect(function () {\n    setText(value);\n  }, [value]);\n  return React.createElement(TextInput, {\n    ref: ref,\n    value: text,\n    placeholder: placeholder,\n    placeholderTextColor: \"rgba(255, 255, 255, .3)\",\n    multiline: lines !== undefined,\n    numberOfLines: lines,\n    onChangeText: function onChangeText(newText) {\n      if (text !== newText) {\n        setText(newText);\n        onChange && onChange(newText);\n      }\n    },\n    style: [styles.Container, lines ? {\n      height: lines * (40 - 24) + 24\n    } : {}],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default React.forwardRef(Input);\nvar styles = StyleSheet.create({\n  Container: {\n    width: \"100%\",\n    backgroundColor: \"#303031\",\n    borderRadius: 12,\n    marginBottom: 8,\n    color: \"#ffffff\",\n    fontSize: 16,\n    fontWeight: \"normal\",\n    paddingTop: 12,\n    paddingBottom: 12,\n    paddingHorizontal: 16\n  }\n});","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/components/input.tsx"],"names":["React","Input","ref","onChange","value","lines","placeholder","useState","text","setText","useEffect","undefined","newText","styles","Container","height","forwardRef","StyleSheet","create","width","backgroundColor","borderRadius","marginBottom","color","fontSize","fontWeight","paddingTop","paddingBottom","paddingHorizontal"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;;AAUA,SAASC,KAAT,OAEEC,GAFF,EAGE;AAAA,MAFEC,QAEF,QAFEA,QAEF;AAAA,MAFYC,KAEZ,QAFYA,KAEZ;AAAA,MAFmBC,KAEnB,QAFmBA,KAEnB;AAAA,MAF0BC,WAE1B,QAF0BA,WAE1B;;AAAA,wBACwBN,KAAK,CAACO,QAAN,CAAeH,KAAf,CADxB;AAAA;AAAA,MACOI,IADP;AAAA,MACaC,OADb;;AAGAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AACpBD,IAAAA,OAAO,CAACL,KAAD,CAAP;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;AAIA,SACE,oBAAC,SAAD;AACE,IAAA,GAAG,EAAEF,GADP;AAEE,IAAA,KAAK,EAAEM,IAFT;AAGE,IAAA,WAAW,EAAEF,WAHf;AAIE,IAAA,oBAAoB,EAAE,yBAJxB;AAKE,IAAA,SAAS,EAAED,KAAK,KAAKM,SALvB;AAME,IAAA,aAAa,EAAEN,KANjB;AAOE,IAAA,YAAY,EAAE,sBAACO,OAAD,EAAa;AACzB,UAAIJ,IAAI,KAAKI,OAAb,EAAsB;AACpBH,QAAAA,OAAO,CAACG,OAAD,CAAP;AACAT,QAAAA,QAAQ,IAAIA,QAAQ,CAACS,OAAD,CAApB;AACD;AACF,KAZH;AAaE,IAAA,KAAK,EAAE,CACLC,MAAM,CAACC,SADF,EAELT,KAAK,GAAG;AAAEU,MAAAA,MAAM,EAAEV,KAAK,IAAI,KAAK,EAAT,CAAL,GAAoB;AAA9B,KAAH,GAAwC,EAFxC,CAbT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoBD;;AAED,eAAeL,KAAK,CAACgB,UAAN,CAAiBf,KAAjB,CAAf;AAEA,IAAMY,MAAM,GAAGI,UAAU,CAACC,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,KAAK,EAAE,MADE;AAETC,IAAAA,eAAe,EAAE,SAFR;AAGTC,IAAAA,YAAY,EAAE,EAHL;AAITC,IAAAA,YAAY,EAAE,CAJL;AAKTC,IAAAA,KAAK,EAAE,SALE;AAMTC,IAAAA,QAAQ,EAAE,EAND;AAOTC,IAAAA,UAAU,EAAE,QAPH;AAQTC,IAAAA,UAAU,EAAE,EARH;AASTC,IAAAA,aAAa,EAAE,EATN;AAUTC,IAAAA,iBAAiB,EAAE;AAVV;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from \"react\";\nimport { StyleSheet, TextInput } from \"react-native\";\n\nexport type InputProps = {\n  value?: string;\n  placeholder?: string;\n  lines?: number;\n  onChange?: (text: string) => void;\n};\n\nfunction Input(\n  { onChange, value, lines, placeholder }: InputProps,\n  ref: React.MutableRefObject<TextInput>\n) {\n  const [text, setText] = React.useState(value);\n\n  React.useEffect(() => {\n    setText(value);\n  }, [value]);\n\n  return (\n    <TextInput\n      ref={ref}\n      value={text}\n      placeholder={placeholder}\n      placeholderTextColor={\"rgba(255, 255, 255, .3)\"}\n      multiline={lines !== undefined}\n      numberOfLines={lines}\n      onChangeText={(newText) => {\n        if (text !== newText) {\n          setText(newText);\n          onChange && onChange(newText);\n        }\n      }}\n      style={[\n        styles.Container,\n        lines ? { height: lines * (40 - 24) + 24 } : {},\n      ]}\n    />\n  );\n}\n\nexport default React.forwardRef(Input);\n\nconst styles = StyleSheet.create({\n  Container: {\n    width: \"100%\",\n    backgroundColor: \"#303031\",\n    borderRadius: 12,\n    marginBottom: 8,\n    color: \"#ffffff\",\n    fontSize: 16,\n    fontWeight: \"normal\",\n    paddingTop: 12,\n    paddingBottom: 12,\n    paddingHorizontal: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}