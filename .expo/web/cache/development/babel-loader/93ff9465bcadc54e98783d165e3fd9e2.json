{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { renderState } from \"./renderState\";\nimport { createState } from \"@state-designer/react\";\nimport * as Static from \"./static\";\nimport uniqueId from \"lodash/uniqueId\";\nvar state = createState({\n  id: \"global\",\n  data: {\n    users: Static.allUsers,\n    tests: Static.tests,\n    selectedUserId: undefined,\n    selectedTestId: undefined,\n    selectedGoalId: undefined\n  },\n  states: {\n    page: {\n      initial: \"tests\",\n      states: {\n        tests: {\n          initial: \"testsIdle\",\n          states: {\n            testsIdle: {\n              on: {\n                CREATED_DRAFT: {\n                  to: \"creatingDraftDialog\"\n                },\n                SELECTED_TEST: [{\n                  do: \"setSelectedTest\"\n                }, {\n                  get: \"selectedTest\",\n                  if: \"selectedTestIsDraft\",\n                  to: \"draftTest\"\n                }, {\n                  if: \"selectedTestIsComplete\",\n                  to: \"completeTest\"\n                }, {\n                  if: \"selectedTestIsInProgress\",\n                  to: \"inProgressTest\"\n                }]\n              }\n            },\n            creatingDraftDialog: {\n              on: {\n                BACKED: {\n                  to: \"testsIdle\"\n                },\n                CLOSED_DIALOG: {\n                  to: \"testsIdle\"\n                },\n                CREATED_DRAFT: {\n                  do: \"createDraft\",\n                  to: [\"testsIdle\", \"draftTest\"]\n                }\n              }\n            }\n          }\n        },\n        draftTest: {\n          on: {\n            CLOSED_PANEL: {\n              do: \"clearSelectedTest\",\n              to: \"tests\"\n            },\n            RENAMED_DRAFT: {\n              get: \"selectedTest\",\n              do: \"setDraftName\"\n            },\n            TOGGLED_DATA_PROPERTY: {\n              get: \"selectedTest\",\n              do: \"toggleTestDataProperty\"\n            }\n          },\n          initial: \"newDraft\",\n          states: {\n            newDraft: {\n              initial: \"draftIdle\",\n              states: {\n                draftIdle: {\n                  on: {\n                    OPENED_MENU: {\n                      to: \"draftTestDialog\"\n                    },\n                    CONTINUED: {\n                      to: \"goals\"\n                    }\n                  }\n                },\n                draftTestDialog: {\n                  on: {\n                    CLOSED_DIALOG: {\n                      to: \"draftIdle\"\n                    },\n                    DUPLICATED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"duplicateDraft\",\n                      to: \"draftIdle\"\n                    },\n                    DELETED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"deleteDraft\",\n                      to: \"tests\"\n                    }\n                  }\n                }\n              }\n            },\n            goals: {\n              initial: \"goalsList\",\n              states: {\n                goalsList: {\n                  initial: \"goalsListIdle\",\n                  states: {\n                    goalsListIdle: {\n                      on: {\n                        CONTINUED: {\n                          to: \"survey\"\n                        },\n                        BACKED: {\n                          to: \"newDraft\"\n                        },\n                        STARTED_CREATING_GOAL: {\n                          to: \"creatingGoal\"\n                        },\n                        OPENED_GOAL_DIALOG: {\n                          to: \"goalDialog\"\n                        }\n                      }\n                    },\n                    goalDialog: {\n                      on: {\n                        CLOSED_DIALOG: {\n                          to: \"goalsListIdle\"\n                        },\n                        STARTED_REORDERING: {\n                          to: \"reorderingGoals\"\n                        },\n                        DELETED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"deleteGoal\",\n                          to: \"goalsListIdle\"\n                        }\n                      }\n                    },\n                    reorderingGoals: {\n                      on: {\n                        MOVED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"moveGoal\"\n                        },\n                        REORDERED: {\n                          get: \"selectedTest\",\n                          do: \"reorderGoals\"\n                        },\n                        CLOSED_DIALOG: {\n                          to: \"goalsListIdle\"\n                        }\n                      }\n                    }\n                  }\n                },\n                creatingGoal: {\n                  initial: \"createGoalIdle\",\n                  onEnter: {\n                    get: \"selectedTest\",\n                    do: \"createUnsavedGoal\"\n                  },\n                  onExit: {\n                    get: \"selectedTest\",\n                    do: [\"cleanupGoals\", \"clearSelectedGoalId\"]\n                  },\n                  states: {\n                    createGoalIdle: {\n                      on: {\n                        CHANGED_GOAL_DESCRIPTION: {\n                          get: \"selectedTest\",\n                          do: \"setGoalDescription\"\n                        },\n                        CLOSED_GOALS: {\n                          to: \"closeGoalDialog\"\n                        },\n                        RECORDED_JOURNEY: {\n                          to: \"recordJourneyDialog\"\n                        },\n                        SELECTED_JOURNEY: {\n                          to: \"journeyDialog\"\n                        },\n                        CREATED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"saveSelectedGoal\",\n                          to: \"goalsList\"\n                        }\n                      }\n                    },\n                    closeGoalDialog: {\n                      on: {\n                        CLOSED_DIALOG: {\n                          to: \"createGoalIdle\"\n                        },\n                        CONFIRMED_CLOSE: {\n                          to: \"goalsList\"\n                        }\n                      }\n                    },\n                    recordJourneyDialog: {\n                      on: {\n                        CLOSED_DIALOG: {\n                          to: \"createGoalIdle\"\n                        },\n                        STARTED_RECORDING_JOURNEY: {\n                          to: \"recordingJourney\"\n                        },\n                        OPENED_JOURNEY: {\n                          to: \"existingJourneyDialog\"\n                        }\n                      }\n                    },\n                    journeyDialog: {\n                      on: {\n                        RERECORDED: {\n                          to: \"recordingJourney\"\n                        },\n                        DELETED_JOURNEY: {\n                          get: \"selectedTest\",\n                          do: \"deleteJourneyFromSelectedGoal\",\n                          to: \"createGoalIdle\"\n                        },\n                        CLOSED_DIALOG: {\n                          to: \"createGoalIdle\"\n                        }\n                      }\n                    },\n                    recordingJourney: {\n                      initial: \"loading\",\n                      states: {\n                        loading: {\n                          on: {\n                            READY: {\n                              to: \"recordingJourney.active\"\n                            }\n                          }\n                        },\n                        active: {\n                          onEnter: {\n                            wait: 4,\n                            to: \"recordingJourney.complete\"\n                          }\n                        },\n                        complete: {\n                          on: {\n                            RERECORDED: {\n                              to: \"recordingJourney.loading\"\n                            },\n                            FINISHED_RECORDING: {\n                              get: \"selectedTest\",\n                              do: \"addJourneyToSelectedGoal\",\n                              to: \"createGoalIdle\"\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            survey: {\n              initial: \"questionsList\",\n              states: {\n                questionsList: {\n                  on: {\n                    CONTINUED: {\n                      to: \"publish\"\n                    },\n                    BACKED: {\n                      to: \"goals\"\n                    },\n                    CREATED_GOAL: {\n                      to: \"creatingQuestion\"\n                    }\n                  }\n                },\n                creatingQuestion: {}\n              }\n            },\n            publish: {\n              initial: \"publishIdle\",\n              states: {\n                publishIdle: {\n                  on: {\n                    TOGGLED_MULTIPLE_TRIES: {\n                      get: \"selectedTest\",\n                      do: \"toggleMultipleTries\"\n                    },\n                    SET_LIFESPAN: {\n                      get: \"selectedTest\",\n                      do: \"setTestDuration\"\n                    },\n                    BACKED: {\n                      to: \"survey\"\n                    },\n                    STARTED_SEARCHING_FOR_USERS: {\n                      to: [\"publish.findingUsers\", \"findingUsersModal\"]\n                    },\n                    OPENED_USER_DIALOG: {\n                      do: \"setSelectedUserId\",\n                      to: \"invitedUserDialog\"\n                    },\n                    CONTINUED: {\n                      to: \"publishDialog\"\n                    }\n                  }\n                },\n                invitedUserDialog: {\n                  on: {\n                    CLOSED_DIALOG: {\n                      to: \"publishIdle\"\n                    },\n                    REMOVED_USER: {\n                      get: \"selectedTest\",\n                      do: [\"removeUserFromDraft\", \"clearSelectedUserId\"],\n                      to: \"publishIdle\"\n                    }\n                  }\n                },\n                findingUsers: {\n                  on: {\n                    CLOSED_MODAL: {\n                      to: [\"noModal\", \"publishIdle\"]\n                    },\n                    SELECTED_USER: {\n                      get: \"selectedTest\",\n                      do: \"addUserToTest\",\n                      to: [\"noModal\", \"publishIdle\"]\n                    }\n                  }\n                },\n                publishDialog: {\n                  on: {\n                    CLOSED_DIALOG: {\n                      to: \"publishIdle\"\n                    },\n                    CREATED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"completeDraft\",\n                      to: \"tests\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        completeTest: {\n          on: {\n            CLOSED_PANEL: {\n              do: \"clearSelectedTest\",\n              to: \"tests\"\n            }\n          }\n        },\n        inProgressTest: {\n          initial: \"inProgressIdle\",\n          states: {\n            inProgressIdle: {\n              on: {\n                CLOSED_PANEL: {\n                  do: \"clearSelectedTest\",\n                  to: \"tests\"\n                },\n                STARTED_SEARCHING_FOR_USERS: {\n                  to: [\"inProgressTest.findingUsers\", \"findingUsersModal\"]\n                },\n                OPENED_USER_DIALOG: {\n                  do: \"setSelectedUserId\",\n                  to: \"inProgressTest.invitedUserDialog\"\n                }\n              }\n            },\n            findingUsers: {\n              on: {\n                CLOSED_MODAL: {\n                  to: [\"noModal\", \"inProgressIdle\"]\n                },\n                SELECTED_USER: {\n                  get: \"selectedTest\",\n                  do: \"addUserToTest\",\n                  to: [\"noModal\", \"inProgressIdle\"]\n                }\n              }\n            },\n            invitedUserDialog: {\n              on: {\n                CLOSED_DIALOG: {\n                  to: \"inProgressIdle\"\n                },\n                REMOVED_USER: {\n                  get: \"selectedTest\",\n                  do: [\"removeUserFromDraft\", \"clearSelectedUserId\"],\n                  to: \"inProgressIdle\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    modals: {\n      initial: \"noModal\",\n      states: {\n        noModal: {},\n        findingUsersModal: {}\n      }\n    }\n  },\n  results: {\n    selectedTest: function selectedTest(data) {\n      return data.tests.find(function (t) {\n        return t.id === data.selectedTestId;\n      });\n    },\n    selectedGoal: function selectedGoal(data) {\n      var _data$tests$find;\n\n      return (_data$tests$find = data.tests.find(function (t) {\n        return t.id === data.selectedTestId;\n      })) == null ? void 0 : _data$tests$find.goals.find(function (goal) {\n        return goal.id === data.selectedGoalId;\n      });\n    },\n    selectedUser: function selectedUser(data) {\n      return data.users.find(function (t) {\n        return t.id === data.selectedUserId;\n      });\n    }\n  },\n  conditions: {\n    selectedTestIsDraft: function selectedTestIsDraft(data, _, selectedTest) {\n      if (selectedTest === undefined) return false;\n      return selectedTest.status === \"draft\";\n    },\n    selectedTestIsComplete: function selectedTestIsComplete(data, _, selectedTest) {\n      if (selectedTest === undefined) return false;\n      return selectedTest.status === \"complete\";\n    },\n    selectedTestIsInProgress: function selectedTestIsInProgress(data, _, selectedTest) {\n      if (selectedTest === undefined) return false;\n      return selectedTest.status === \"inProgress\";\n    }\n  },\n  actions: {\n    setSelectedTest: function setSelectedTest(data) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var test = payload.test;\n      data.selectedTestId = test.id;\n    },\n    clearSelectedTest: function clearSelectedTest(data) {\n      data.selectedTestId = undefined;\n    },\n    createDraft: function createDraft(data, _ref) {\n      var name = _ref.name;\n      var newTest = {\n        id: \"test\" + Date.now(),\n        name: name,\n        invitedUsers: [],\n        timeRemaining: Static.maxDuration,\n        status: \"draft\",\n        lastPage: 0,\n        options: {\n          testDuration: 1000 * 60 * 60 * 24 * 5,\n          allowMultipleTries: false,\n          data: {\n            frontFacingCamera: true,\n            microphone: true,\n            location: true\n          }\n        },\n        survey: [],\n        goals: []\n      };\n      data.tests.push(newTest);\n      data.selectedTestId = newTest.id;\n    },\n    addUserToTest: function addUserToTest(data, _ref2, selectedTest) {\n      var user = _ref2.user;\n      if (!selectedTest) return;\n      selectedTest.invitedUsers.push(user);\n    },\n    duplicateDraft: function duplicateDraft(data, _, selectedTest) {\n      if (!selectedTest) return;\n\n      var newTest = _objectSpread(_objectSpread({}, selectedTest), {}, {\n        id: \"test\" + Date.now(),\n        name: selectedTest.name + \" Copy\"\n      });\n\n      data.tests.push(newTest);\n      data.selectedTestId = newTest.id;\n    },\n    deleteDraft: function deleteDraft(data, _, selectedTest) {\n      if (!selectedTest) return;\n      var index = data.tests.findIndex(function (t) {\n        return t.id === selectedTest.id;\n      });\n      data.selectedTestId = undefined;\n      data.tests.splice(index, 1);\n    },\n    completeDraft: function completeDraft(data, _, selectedTest) {\n      if (!selectedTest) return;\n      selectedTest.status = \"inProgress\";\n    },\n    toggleMultipleTries: function toggleMultipleTries(data, _, selectedTest) {\n      if (!selectedTest) return;\n      selectedTest.options.allowMultipleTries = !selectedTest.options.allowMultipleTries;\n    },\n    toggleTestDataProperty: function toggleTestDataProperty(data, _ref3, selectedTest) {\n      var property = _ref3.property;\n      if (!selectedTest) return;\n      selectedTest.options.data[property] = !selectedTest.options.data[property];\n    },\n    setDraftName: function setDraftName(data, payload, selectedTest) {\n      if (!selectedTest) return;\n      var _payload$value = payload.value,\n          value = _payload$value === void 0 ? \"\" : _payload$value;\n      selectedTest.name = value;\n    },\n    setTestDuration: function setTestDuration(data) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var selectedTest = arguments.length > 2 ? arguments[2] : undefined;\n      if (!selectedTest) return;\n      var value = payload.value;\n      selectedTest.options.testDuration = value * (1000 * 60 * 24);\n    },\n    removeUserFromDraft: function removeUserFromDraft(data, _, selectedTest) {\n      if (!selectedTest) return;\n      var index = selectedTest.invitedUsers.findIndex(function (t) {\n        return t.id === data.selectedUserId;\n      });\n      selectedTest.invitedUsers.splice(index, 1);\n    },\n    setSelectedUserId: function setSelectedUserId(data, _ref4) {\n      var user = _ref4.user;\n      data.selectedUserId = user.id;\n    },\n    clearSelectedUserId: function clearSelectedUserId(data) {\n      data.selectedUserId = \"\";\n    },\n    deleteGoal: function deleteGoal(data, _ref5, selectedTest) {\n      var id = _ref5.id;\n      var index = selectedTest.goals.findIndex(function (g) {\n        return g.id === id;\n      });\n      selectedTest.goals.splice(index, 1);\n    },\n    moveGoal: function moveGoal(data, _ref6, selectedTest) {\n      var _selectedTest$goals;\n\n      var id = _ref6.id,\n          delta = _ref6.delta;\n      var index = selectedTest.goals.findIndex(function (g) {\n        return g.id === id;\n      });\n\n      (_selectedTest$goals = selectedTest.goals).splice.apply(_selectedTest$goals, [index + delta, 0].concat(_toConsumableArray(selectedTest.goals.splice(index, 1))));\n    },\n    setGoalDescription: function setGoalDescription(data, _ref7, selectedTest) {\n      var text = _ref7.text;\n      selectedTest.goals.find(function (g) {\n        return g.id === data.selectedGoalId;\n      }).description = text;\n    },\n    createUnsavedGoal: function createUnsavedGoal(data, _, selectedTest) {\n      var id = uniqueId();\n      data.selectedGoalId = id;\n      selectedTest.goals.push({\n        id: id,\n        saved: false,\n        description: \"\",\n        journey: undefined\n      });\n    },\n    addJourneyToSelectedGoal: function addJourneyToSelectedGoal(data, _, selectedTest) {\n      selectedTest.goals.find(function (g) {\n        return g.id === data.selectedGoalId;\n      }).journey = {\n        id: uniqueId(),\n        duration: 236,\n        pages: 8,\n        interactions: 24\n      };\n    },\n    deleteJourneyFromSelectedGoal: function deleteJourneyFromSelectedGoal(data, _, selectedTest) {\n      selectedTest.goals.find(function (g) {\n        return g.id === data.selectedGoalId;\n      }).journey = undefined;\n    },\n    saveSelectedGoal: function saveSelectedGoal(data, _, selectedTest) {\n      selectedTest.goals.find(function (g) {\n        return g.id === data.selectedGoalId;\n      }).saved = true;\n    },\n    reorderGoals: function reorderGoals(data, ids, selectedTest) {\n      selectedTest.goals.sort(function (a, b) {\n        return ids.indexOf(a.id) - ids.indexOf(b.id);\n      });\n    },\n    clearSelectedGoalId: function clearSelectedGoalId(data) {\n      data.selectedGoalId = undefined;\n    },\n    cleanupGoals: function cleanupGoals(data, _, selectedTest) {\n      console.log(selectedTest.goals.length);\n      selectedTest.goals = selectedTest.goals.filter(function (g) {\n        return g.saved;\n      });\n    }\n  },\n  values: {\n    selectedTest: function selectedTest(data) {\n      return data.tests.find(function (t) {\n        return t.id === data.selectedTestId;\n      });\n    },\n    selectedGoal: function selectedGoal(data) {\n      var _data$tests$find2;\n\n      return (_data$tests$find2 = data.tests.find(function (t) {\n        return t.id === data.selectedTestId;\n      })) == null ? void 0 : _data$tests$find2.goals.find(function (goal) {\n        return goal.id === data.selectedGoalId;\n      });\n    }\n  }\n});\nexport default state;\nrenderState(state);","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/state.ts"],"names":["renderState","createState","Static","uniqueId","state","id","data","users","allUsers","tests","selectedUserId","undefined","selectedTestId","selectedGoalId","states","page","initial","testsIdle","on","CREATED_DRAFT","to","SELECTED_TEST","do","get","if","creatingDraftDialog","BACKED","CLOSED_DIALOG","draftTest","CLOSED_PANEL","RENAMED_DRAFT","TOGGLED_DATA_PROPERTY","newDraft","draftIdle","OPENED_MENU","CONTINUED","draftTestDialog","DUPLICATED_DRAFT","DELETED_DRAFT","goals","goalsList","goalsListIdle","STARTED_CREATING_GOAL","OPENED_GOAL_DIALOG","goalDialog","STARTED_REORDERING","DELETED_GOAL","reorderingGoals","MOVED_GOAL","REORDERED","creatingGoal","onEnter","onExit","createGoalIdle","CHANGED_GOAL_DESCRIPTION","CLOSED_GOALS","RECORDED_JOURNEY","SELECTED_JOURNEY","CREATED_GOAL","closeGoalDialog","CONFIRMED_CLOSE","recordJourneyDialog","STARTED_RECORDING_JOURNEY","OPENED_JOURNEY","journeyDialog","RERECORDED","DELETED_JOURNEY","recordingJourney","loading","READY","active","wait","complete","FINISHED_RECORDING","survey","questionsList","creatingQuestion","publish","publishIdle","TOGGLED_MULTIPLE_TRIES","SET_LIFESPAN","STARTED_SEARCHING_FOR_USERS","OPENED_USER_DIALOG","invitedUserDialog","REMOVED_USER","findingUsers","CLOSED_MODAL","SELECTED_USER","publishDialog","completeTest","inProgressTest","inProgressIdle","modals","noModal","findingUsersModal","results","selectedTest","find","t","selectedGoal","goal","selectedUser","conditions","selectedTestIsDraft","_","status","selectedTestIsComplete","selectedTestIsInProgress","actions","setSelectedTest","payload","test","clearSelectedTest","createDraft","name","newTest","Date","now","invitedUsers","timeRemaining","maxDuration","lastPage","options","testDuration","allowMultipleTries","frontFacingCamera","microphone","location","push","addUserToTest","user","duplicateDraft","deleteDraft","index","findIndex","splice","completeDraft","toggleMultipleTries","toggleTestDataProperty","property","setDraftName","value","setTestDuration","removeUserFromDraft","setSelectedUserId","clearSelectedUserId","deleteGoal","g","moveGoal","delta","setGoalDescription","text","description","createUnsavedGoal","saved","journey","addJourneyToSelectedGoal","duration","pages","interactions","deleteJourneyFromSelectedGoal","saveSelectedGoal","reorderGoals","ids","sort","a","b","indexOf","clearSelectedGoalId","cleanupGoals","console","log","length","filter","values"],"mappings":"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","sourcesContent":["import { renderState } from \"./renderState\"\nimport { createState, S } from \"@state-designer/react\"\nimport * as Static from \"./static\"\nimport * as Types from \"./types\"\nimport uniqueId from \"lodash/uniqueId\"\n\nconst state = createState({\n  id: \"global\",\n  data: {\n    users: Static.allUsers,\n    tests: Static.tests,\n    selectedUserId: undefined as string | undefined,\n    selectedTestId: undefined as string | undefined,\n    selectedGoalId: undefined as string | undefined,\n  },\n  states: {\n    page: {\n      initial: \"tests\",\n      states: {\n        tests: {\n          initial: \"testsIdle\",\n          states: {\n            testsIdle: {\n              on: {\n                CREATED_DRAFT: { to: \"creatingDraftDialog\" },\n                SELECTED_TEST: [\n                  {\n                    do: \"setSelectedTest\",\n                  },\n                  {\n                    get: \"selectedTest\",\n                    if: \"selectedTestIsDraft\",\n                    to: \"draftTest\",\n                  },\n                  {\n                    if: \"selectedTestIsComplete\",\n                    to: \"completeTest\",\n                  },\n                  {\n                    if: \"selectedTestIsInProgress\",\n                    to: \"inProgressTest\",\n                  },\n                ],\n              },\n            },\n            creatingDraftDialog: {\n              on: {\n                BACKED: { to: \"testsIdle\" },\n                CLOSED_DIALOG: { to: \"testsIdle\" },\n                CREATED_DRAFT: {\n                  do: \"createDraft\",\n                  to: [\"testsIdle\", \"draftTest\"],\n                },\n              },\n            },\n          },\n        },\n        draftTest: {\n          on: {\n            CLOSED_PANEL: { do: \"clearSelectedTest\", to: \"tests\" },\n            RENAMED_DRAFT: { get: \"selectedTest\", do: \"setDraftName\" },\n            TOGGLED_DATA_PROPERTY: {\n              get: \"selectedTest\",\n              do: \"toggleTestDataProperty\",\n            },\n          },\n          initial: \"newDraft\",\n          states: {\n            newDraft: {\n              initial: \"draftIdle\",\n              states: {\n                draftIdle: {\n                  on: {\n                    OPENED_MENU: { to: \"draftTestDialog\" },\n                    CONTINUED: { to: \"goals\" },\n                  },\n                },\n                draftTestDialog: {\n                  on: {\n                    CLOSED_DIALOG: { to: \"draftIdle\" },\n                    DUPLICATED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"duplicateDraft\",\n                      to: \"draftIdle\",\n                    },\n                    DELETED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"deleteDraft\",\n                      to: \"tests\",\n                    },\n                  },\n                },\n              },\n            },\n            goals: {\n              initial: \"goalsList\",\n              states: {\n                goalsList: {\n                  initial: \"goalsListIdle\",\n                  states: {\n                    goalsListIdle: {\n                      on: {\n                        CONTINUED: { to: \"survey\" },\n                        BACKED: { to: \"newDraft\" },\n                        STARTED_CREATING_GOAL: { to: \"creatingGoal\" },\n                        OPENED_GOAL_DIALOG: { to: \"goalDialog\" },\n                      },\n                    },\n                    goalDialog: {\n                      on: {\n                        CLOSED_DIALOG: { to: \"goalsListIdle\" },\n                        STARTED_REORDERING: { to: \"reorderingGoals\" },\n                        DELETED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"deleteGoal\",\n                          to: \"goalsListIdle\",\n                        },\n                      },\n                    },\n                    reorderingGoals: {\n                      on: {\n                        MOVED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"moveGoal\",\n                        },\n                        REORDERED: { get: \"selectedTest\", do: \"reorderGoals\" },\n                        CLOSED_DIALOG: { to: \"goalsListIdle\" },\n                      },\n                    },\n                  },\n                },\n                creatingGoal: {\n                  initial: \"createGoalIdle\",\n                  onEnter: {\n                    get: \"selectedTest\",\n                    do: \"createUnsavedGoal\",\n                  },\n                  onExit: {\n                    get: \"selectedTest\",\n                    do: [\"cleanupGoals\", \"clearSelectedGoalId\"],\n                  },\n                  states: {\n                    createGoalIdle: {\n                      on: {\n                        CHANGED_GOAL_DESCRIPTION: {\n                          get: \"selectedTest\",\n                          do: \"setGoalDescription\",\n                        },\n                        CLOSED_GOALS: { to: \"closeGoalDialog\" },\n                        RECORDED_JOURNEY: { to: \"recordJourneyDialog\" },\n                        SELECTED_JOURNEY: { to: \"journeyDialog\" },\n                        CREATED_GOAL: {\n                          get: \"selectedTest\",\n                          do: \"saveSelectedGoal\",\n                          to: \"goalsList\",\n                        },\n                      },\n                    },\n                    closeGoalDialog: {\n                      on: {\n                        CLOSED_DIALOG: { to: \"createGoalIdle\" },\n                        CONFIRMED_CLOSE: { to: \"goalsList\" },\n                      },\n                    },\n                    recordJourneyDialog: {\n                      on: {\n                        CLOSED_DIALOG: {\n                          to: \"createGoalIdle\",\n                        },\n                        STARTED_RECORDING_JOURNEY: {\n                          to: \"recordingJourney\",\n                        },\n                        OPENED_JOURNEY: {\n                          to: \"existingJourneyDialog\",\n                        },\n                      },\n                    },\n                    journeyDialog: {\n                      on: {\n                        RERECORDED: { to: \"recordingJourney\" },\n                        DELETED_JOURNEY: {\n                          get: \"selectedTest\",\n                          do: \"deleteJourneyFromSelectedGoal\",\n                          to: \"createGoalIdle\",\n                        },\n                        CLOSED_DIALOG: { to: \"createGoalIdle\" },\n                      },\n                    },\n                    recordingJourney: {\n                      initial: \"loading\",\n                      states: {\n                        loading: {\n                          on: {\n                            READY: {\n                              to: \"recordingJourney.active\",\n                            },\n                          },\n                        },\n                        active: {\n                          onEnter: {\n                            wait: 4,\n                            to: \"recordingJourney.complete\",\n                          },\n                        },\n                        complete: {\n                          on: {\n                            RERECORDED: { to: \"recordingJourney.loading\" },\n                            FINISHED_RECORDING: {\n                              get: \"selectedTest\",\n                              do: \"addJourneyToSelectedGoal\",\n                              to: \"createGoalIdle\",\n                            },\n                          },\n                        },\n                      },\n                    },\n                  },\n                },\n              },\n            },\n            survey: {\n              initial: \"questionsList\",\n              states: {\n                questionsList: {\n                  on: {\n                    CONTINUED: { to: \"publish\" },\n                    BACKED: { to: \"goals\" },\n                    CREATED_GOAL: { to: \"creatingQuestion\" },\n                  },\n                },\n                creatingQuestion: {},\n              },\n            },\n            publish: {\n              initial: \"publishIdle\",\n              states: {\n                publishIdle: {\n                  on: {\n                    TOGGLED_MULTIPLE_TRIES: {\n                      get: \"selectedTest\",\n                      do: \"toggleMultipleTries\",\n                    },\n                    SET_LIFESPAN: {\n                      get: \"selectedTest\",\n                      do: \"setTestDuration\",\n                    },\n                    BACKED: { to: \"survey\" },\n                    STARTED_SEARCHING_FOR_USERS: {\n                      to: [\"publish.findingUsers\", \"findingUsersModal\"],\n                    },\n                    OPENED_USER_DIALOG: {\n                      do: \"setSelectedUserId\",\n                      to: \"invitedUserDialog\",\n                    },\n                    CONTINUED: { to: \"publishDialog\" },\n                  },\n                },\n                invitedUserDialog: {\n                  on: {\n                    CLOSED_DIALOG: { to: \"publishIdle\" },\n                    REMOVED_USER: {\n                      get: \"selectedTest\",\n                      do: [\"removeUserFromDraft\", \"clearSelectedUserId\"],\n                      to: \"publishIdle\",\n                    },\n                  },\n                },\n                findingUsers: {\n                  on: {\n                    CLOSED_MODAL: { to: [\"noModal\", \"publishIdle\"] },\n                    SELECTED_USER: {\n                      get: \"selectedTest\",\n                      do: \"addUserToTest\",\n                      to: [\"noModal\", \"publishIdle\"],\n                    },\n                  },\n                },\n                publishDialog: {\n                  on: {\n                    CLOSED_DIALOG: { to: \"publishIdle\" },\n                    CREATED_DRAFT: {\n                      get: \"selectedTest\",\n                      do: \"completeDraft\",\n                      to: \"tests\",\n                    },\n                  },\n                },\n              },\n            },\n          },\n        },\n        completeTest: {\n          on: {\n            CLOSED_PANEL: { do: \"clearSelectedTest\", to: \"tests\" },\n          },\n        },\n        inProgressTest: {\n          initial: \"inProgressIdle\",\n          states: {\n            inProgressIdle: {\n              on: {\n                CLOSED_PANEL: { do: \"clearSelectedTest\", to: \"tests\" },\n                STARTED_SEARCHING_FOR_USERS: {\n                  to: [\"inProgressTest.findingUsers\", \"findingUsersModal\"],\n                },\n                OPENED_USER_DIALOG: {\n                  do: \"setSelectedUserId\",\n                  to: \"inProgressTest.invitedUserDialog\",\n                },\n              },\n            },\n            findingUsers: {\n              on: {\n                CLOSED_MODAL: { to: [\"noModal\", \"inProgressIdle\"] },\n                SELECTED_USER: {\n                  get: \"selectedTest\",\n                  do: \"addUserToTest\",\n                  to: [\"noModal\", \"inProgressIdle\"],\n                },\n              },\n            },\n            invitedUserDialog: {\n              on: {\n                CLOSED_DIALOG: { to: \"inProgressIdle\" },\n                REMOVED_USER: {\n                  get: \"selectedTest\",\n                  do: [\"removeUserFromDraft\", \"clearSelectedUserId\"],\n                  to: \"inProgressIdle\",\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n    modals: {\n      initial: \"noModal\",\n      states: {\n        noModal: {},\n        findingUsersModal: {},\n      },\n    },\n  },\n  results: {\n    selectedTest(data) {\n      return data.tests.find((t) => t.id === data.selectedTestId)\n    },\n    selectedGoal(data) {\n      return data.tests\n        .find((t) => t.id === data.selectedTestId)\n        ?.goals.find((goal) => goal.id === data.selectedGoalId)\n    },\n    selectedUser(data) {\n      return data.users.find((t) => t.id === data.selectedUserId)\n    },\n  },\n  conditions: {\n    selectedTestIsDraft(data, _, selectedTest) {\n      if (selectedTest === undefined) return false\n      return selectedTest.status === \"draft\"\n    },\n    selectedTestIsComplete(data, _, selectedTest) {\n      if (selectedTest === undefined) return false\n      return selectedTest.status === \"complete\"\n    },\n    selectedTestIsInProgress(data, _, selectedTest) {\n      if (selectedTest === undefined) return false\n      return selectedTest.status === \"inProgress\"\n    },\n  },\n  actions: {\n    setSelectedTest(data, payload = {}) {\n      const { test } = payload\n      data.selectedTestId = test.id\n    },\n    clearSelectedTest(data) {\n      data.selectedTestId = undefined\n    },\n    createDraft(data, { name }: { name: string }) {\n      const newTest: Types.UserTest = {\n        id: \"test\" + Date.now(),\n        name,\n        invitedUsers: [],\n        timeRemaining: Static.maxDuration,\n        status: \"draft\",\n        lastPage: 0,\n        options: {\n          testDuration: 1000 * 60 * 60 * 24 * 5,\n          allowMultipleTries: false,\n          data: {\n            frontFacingCamera: true,\n            microphone: true,\n            location: true,\n          },\n        },\n        survey: [],\n        goals: [],\n      }\n\n      data.tests.push(newTest)\n      data.selectedTestId = newTest.id\n    },\n    addUserToTest(\n      data,\n      { user }: { user: Types.User },\n      selectedTest: Types.UserTest\n    ) {\n      if (!selectedTest) return\n      selectedTest.invitedUsers.push(user)\n    },\n    duplicateDraft(data, _, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      const newTest: Types.UserTest = {\n        ...selectedTest,\n        id: \"test\" + Date.now(),\n        name: selectedTest.name + \" Copy\",\n      }\n\n      data.tests.push(newTest)\n      data.selectedTestId = newTest.id\n    },\n    deleteDraft(data, _, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      const index = data.tests.findIndex((t) => t.id === selectedTest.id)\n      data.selectedTestId = undefined\n      data.tests.splice(index, 1)\n    },\n    completeDraft(data, _, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      selectedTest.status = \"inProgress\"\n    },\n    toggleMultipleTries(data, _, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      selectedTest.options.allowMultipleTries = !selectedTest.options\n        .allowMultipleTries\n    },\n    toggleTestDataProperty(data, { property }, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      selectedTest.options.data[property] = !selectedTest.options.data[property]\n    },\n    setDraftName(data, payload, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      const { value = \"\" } = payload\n      selectedTest.name = value\n    },\n    setTestDuration(data, payload = {}, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      const { value } = payload\n      selectedTest.options.testDuration = value * (1000 * 60 * 24)\n    },\n    removeUserFromDraft(data, _, selectedTest: Types.UserTest) {\n      if (!selectedTest) return\n      const index = selectedTest.invitedUsers.findIndex(\n        (t) => t.id === data.selectedUserId\n      )\n      selectedTest.invitedUsers.splice(index, 1)\n    },\n    // Selected User\n    setSelectedUserId(data, { user }: { user: Types.User }) {\n      data.selectedUserId = user.id\n    },\n    clearSelectedUserId(data) {\n      data.selectedUserId = \"\"\n    },\n    // Goals\n    deleteGoal(data, { id }: { id: string }, selectedTest: Types.UserTest) {\n      const index = selectedTest.goals.findIndex((g) => g.id === id)\n      selectedTest.goals.splice(index, 1)\n    },\n    moveGoal(\n      data,\n      { id, delta }: { id: string; delta: number },\n      selectedTest: Types.UserTest\n    ) {\n      const index = selectedTest.goals.findIndex((g) => g.id === id)\n      selectedTest.goals.splice(\n        index + delta,\n        0,\n        ...selectedTest.goals.splice(index, 1)\n      )\n    },\n    setGoalDescription(\n      data,\n      { text }: { text: string },\n      selectedTest: Types.UserTest\n    ) {\n      selectedTest.goals.find(\n        (g) => g.id === data.selectedGoalId\n      ).description = text\n    },\n    createUnsavedGoal(data, _, selectedTest: Types.UserTest) {\n      const id = uniqueId()\n      data.selectedGoalId = id\n      selectedTest.goals.push({\n        id,\n        saved: false,\n        description: \"\",\n        journey: undefined,\n      })\n    },\n    addJourneyToSelectedGoal(data, _, selectedTest: Types.UserTest) {\n      selectedTest.goals.find((g) => g.id === data.selectedGoalId).journey = {\n        id: uniqueId(),\n        duration: 236,\n        pages: 8,\n        interactions: 24,\n      }\n    },\n    deleteJourneyFromSelectedGoal(data, _, selectedTest: Types.UserTest) {\n      selectedTest.goals.find(\n        (g) => g.id === data.selectedGoalId\n      ).journey = undefined\n    },\n    saveSelectedGoal(data, _, selectedTest: Types.UserTest) {\n      selectedTest.goals.find((g) => g.id === data.selectedGoalId).saved = true\n    },\n    reorderGoals(data, ids: string[], selectedTest: Types.UserTest) {\n      selectedTest.goals.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id))\n    },\n    clearSelectedGoalId(data) {\n      data.selectedGoalId = undefined\n    },\n    cleanupGoals(data, _, selectedTest: Types.UserTest) {\n      console.log(selectedTest.goals.length)\n      selectedTest.goals = selectedTest.goals.filter((g) => g.saved)\n    },\n  },\n  values: {\n    selectedTest(data) {\n      return data.tests.find((t) => t.id === data.selectedTestId)\n    },\n    selectedGoal(data) {\n      return data.tests\n        .find((t) => t.id === data.selectedTestId)\n        ?.goals.find((goal) => goal.id === data.selectedGoalId)\n    },\n  },\n})\n\nexport default state\n\nrenderState(state)\n"]},"metadata":{},"sourceType":"module"}