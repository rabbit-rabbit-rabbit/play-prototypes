{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { useEffect } from \"react\";\nimport { createState, useStateDesigner } from \"@state-designer/react\";\nvar state = createState({\n  data: {\n    stack: []\n  },\n  on: {\n    OPENED_PANEL: {\n      get: \"panel\",\n      do: \"openPanel\"\n    },\n    CLOSED_PANEL: {\n      get: \"panel\",\n      do: \"closePanel\"\n    },\n    ADDED_PANEL: {\n      do: \"addPanelToStack\"\n    },\n    REMOVED_PANEL: {\n      do: \"removePanelFromStack\"\n    }\n  },\n  results: {\n    panel: function panel(data, _panel) {\n      return data.stack.find(function (p) {\n        return p.id === _panel.id;\n      });\n    }\n  },\n  actions: {\n    openPanel: function openPanel(data, _, panel) {\n      var _data$stack;\n\n      panel.open = true;\n      var t = data.stack.indexOf(panel);\n\n      (_data$stack = data.stack).push.apply(_data$stack, _toConsumableArray(data.stack.splice(t, 1)));\n    },\n    closePanel: function closePanel(data, _, panel) {\n      var _data$stack2;\n\n      panel.open = false;\n      var t = data.stack.indexOf(panel);\n\n      (_data$stack2 = data.stack).unshift.apply(_data$stack2, _toConsumableArray(data.stack.splice(t, 1)));\n    },\n    addPanelToStack: function addPanelToStack(data, panel) {\n      if (panel.open) {\n        data.stack.push(panel);\n      } else {\n        data.stack.unshift(panel);\n      }\n    },\n    removePanelFromStack: function removePanelFromStack(data, panel) {\n      data.stack = data.stack.filter(function (p) {\n        return p.id !== panel.id;\n      });\n    }\n  },\n  values: {\n    order: function order(data) {\n      return data.stack.filter(function (p) {\n        return p.open;\n      }).map(function (p) {\n        return p.id;\n      });\n    }\n  }\n});\nexport default function usePanelStack(id, open) {\n  useEffect(function () {\n    state.send(\"ADDED_PANEL\", {\n      id: id,\n      open: open\n    });\n    return function () {\n      return state.send(\"REMOVED_PANEL\", {\n        id: id,\n        open: open\n      });\n    };\n  }, []);\n  useEffect(function () {\n    if (open) {\n      state.send(\"OPENED_PANEL\", {\n        id: id,\n        open: open\n      });\n    } else {\n      state.send(\"CLOSED_PANEL\", {\n        id: id,\n        open: open\n      });\n    }\n  }, [open]);\n  var local = useStateDesigner(state);\n  var zIndex = open ? local.values.order.indexOf(id) : -2;\n  return {\n    zIndex: zIndex,\n    isTopPanel: zIndex === local.values.order.length - 1\n  };\n}","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/src/hooks/usePanelStack.tsx"],"names":["useEffect","createState","useStateDesigner","state","data","stack","on","OPENED_PANEL","get","do","CLOSED_PANEL","ADDED_PANEL","REMOVED_PANEL","results","panel","find","p","id","actions","openPanel","_","open","t","indexOf","push","splice","closePanel","unshift","addPanelToStack","removePanelFromStack","filter","values","order","map","usePanelStack","send","local","zIndex","isTopPanel","length"],"mappings":"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","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { createState, useStateDesigner } from \"@state-designer/react\"\n\ntype Panel = { id: string; open: boolean }\n\nconst state = createState({\n  data: {\n    stack: [] as Panel[],\n  },\n  on: {\n    OPENED_PANEL: {\n      get: \"panel\",\n      do: \"openPanel\",\n    },\n    CLOSED_PANEL: {\n      get: \"panel\",\n      do: \"closePanel\",\n    },\n    ADDED_PANEL: {\n      do: \"addPanelToStack\",\n    },\n    REMOVED_PANEL: {\n      do: \"removePanelFromStack\",\n    },\n  },\n  results: {\n    panel(data, panel: Panel) {\n      return data.stack.find((p) => p.id === panel.id)\n    },\n  },\n  actions: {\n    openPanel(data, _, panel: Panel) {\n      panel.open = true\n      const t = data.stack.indexOf(panel)\n      data.stack.push(...data.stack.splice(t, 1))\n    },\n    closePanel(data, _, panel: Panel) {\n      panel.open = false\n      const t = data.stack.indexOf(panel)\n      data.stack.unshift(...data.stack.splice(t, 1))\n    },\n    addPanelToStack(data, panel: Panel) {\n      if (panel.open) {\n        data.stack.push(panel)\n      } else {\n        data.stack.unshift(panel)\n      }\n    },\n    removePanelFromStack(data, panel: Panel) {\n      data.stack = data.stack.filter((p) => p.id !== panel.id)\n    },\n  },\n  values: {\n    order(data) {\n      return data.stack.filter((p) => p.open).map((p) => p.id)\n    },\n  },\n})\n\nexport default function usePanelStack(id: string, open: boolean) {\n  useEffect(() => {\n    state.send(\"ADDED_PANEL\", { id, open })\n    return () => state.send(\"REMOVED_PANEL\", { id, open })\n  }, [])\n\n  useEffect(() => {\n    if (open) {\n      state.send(\"OPENED_PANEL\", { id, open })\n    } else {\n      state.send(\"CLOSED_PANEL\", { id, open })\n    }\n  }, [open])\n\n  const local = useStateDesigner(state)\n\n  const zIndex = open ? local.values.order.indexOf(id) : -2\n\n  return { zIndex, isTopPanel: zIndex === local.values.order.length - 1 }\n}\n"]},"metadata":{},"sourceType":"module"}