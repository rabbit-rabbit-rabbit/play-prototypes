{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/steveruiz/GitHub/play-rn-prototype/node_modules/react-native-dialog/src/Title.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\n\nvar DialogTitle = function DialogTitle(props) {\n  var style = props.style,\n      children = props.children,\n      nodeProps = _objectWithoutProperties(props, [\"style\", \"children\"]);\n\n  return React.createElement(Text, _extends({\n    style: [styles.text, style]\n  }, nodeProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nDialogTitle.propTypes = _objectSpread(_objectSpread({}, Text.propTypes), {}, {\n  style: PropTypes.any,\n  children: PropTypes.string.isRequired\n});\nDialogTitle.displayName = \"DialogTitle\";\nvar styles = StyleSheet.create({\n  text: Platform.select({\n    ios: {\n      color: \"black\",\n      textAlign: \"center\",\n      fontSize: 18,\n      fontWeight: \"600\"\n    },\n    android: {\n      fontWeight: \"500\",\n      fontSize: 18\n    },\n    web: {\n      fontWeight: \"500\",\n      fontSize: 18\n    }\n  })\n});\nexport default DialogTitle;","map":{"version":3,"sources":["/Users/steveruiz/GitHub/play-rn-prototype/node_modules/react-native-dialog/src/Title.js"],"names":["PropTypes","React","DialogTitle","props","style","children","nodeProps","styles","text","propTypes","Text","any","string","isRequired","displayName","StyleSheet","create","Platform","select","ios","color","textAlign","fontSize","fontWeight","android","web"],"mappings":";;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;AAAA,MACrBC,KADqB,GACaD,KADb,CACrBC,KADqB;AAAA,MACdC,QADc,GACaF,KADb,CACdE,QADc;AAAA,MACDC,SADC,4BACaH,KADb;;AAE7B,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACI,MAAM,CAACC,IAAR,EAAcJ,KAAd;AAAb,KAAuCE,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACGD,QADH,CADF;AAKD,CAPD;;AASAH,WAAW,CAACO,SAAZ,mCACKC,IAAI,CAACD,SADV;AAEEL,EAAAA,KAAK,EAAEJ,SAAS,CAACW,GAFnB;AAGEN,EAAAA,QAAQ,EAAEL,SAAS,CAACY,MAAV,CAAiBC;AAH7B;AAMAX,WAAW,CAACY,WAAZ,GAA0B,aAA1B;AAEA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,IAAI,EAAES,QAAQ,CAACC,MAAT,CAAgB;AACpBC,IAAAA,GAAG,EAAE;AACHC,MAAAA,KAAK,EAAE,OADJ;AAEHC,MAAAA,SAAS,EAAE,QAFR;AAGHC,MAAAA,QAAQ,EAAE,EAHP;AAIHC,MAAAA,UAAU,EAAE;AAJT,KADe;AAOpBC,IAAAA,OAAO,EAAE;AACPD,MAAAA,UAAU,EAAE,KADL;AAEPD,MAAAA,QAAQ,EAAE;AAFH,KAPW;AAWpBG,IAAAA,GAAG,EAAE;AACHF,MAAAA,UAAU,EAAE,KADT;AAEHD,MAAAA,QAAQ,EAAE;AAFP;AAXe,GAAhB;AADyB,CAAlB,CAAf;AAmBA,eAAepB,WAAf","sourcesContent":["import PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Platform, StyleSheet, Text } from \"react-native\";\n\nconst DialogTitle = (props) => {\n  const { style, children, ...nodeProps } = props;\n  return (\n    <Text style={[styles.text, style]} {...nodeProps}>\n      {children}\n    </Text>\n  );\n};\n\nDialogTitle.propTypes = {\n  ...Text.propTypes,\n  style: PropTypes.any,\n  children: PropTypes.string.isRequired,\n};\n\nDialogTitle.displayName = \"DialogTitle\";\n\nconst styles = StyleSheet.create({\n  text: Platform.select({\n    ios: {\n      color: \"black\",\n      textAlign: \"center\",\n      fontSize: 18,\n      fontWeight: \"600\",\n    },\n    android: {\n      fontWeight: \"500\",\n      fontSize: 18,\n    },\n    web: {\n      fontWeight: \"500\",\n      fontSize: 18,\n    },\n  }),\n});\n\nexport default DialogTitle;\n"]},"metadata":{},"sourceType":"module"}